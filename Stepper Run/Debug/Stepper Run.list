
Stepper Run.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08004b8c  08004b8c  00014b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004c44  08004c44  00014c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004c4c  08004c4c  00014c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004c50  08004c50  00014c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08004c54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  8 .bss          00000108  20000070  20000070  00020070  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000178  20000178  00020070  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000edb4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002205  00000000  00000000  0002ee54  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000e18  00000000  00000000  00031060  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000d20  00000000  00000000  00031e78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006e3b  00000000  00000000  00032b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004587  00000000  00000000  000399d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003df5a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004148  00000000  00000000  0003dfd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004b74 	.word	0x08004b74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004b74 	.word	0x08004b74

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b97a 	b.w	800057c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000586:	463b      	mov	r3, r7
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000592:	4b21      	ldr	r3, [pc, #132]	; (8000618 <MX_ADC1_Init+0x98>)
 8000594:	4a21      	ldr	r2, [pc, #132]	; (800061c <MX_ADC1_Init+0x9c>)
 8000596:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000598:	4b1f      	ldr	r3, [pc, #124]	; (8000618 <MX_ADC1_Init+0x98>)
 800059a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800059e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005a0:	4b1d      	ldr	r3, [pc, #116]	; (8000618 <MX_ADC1_Init+0x98>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005a6:	4b1c      	ldr	r3, [pc, #112]	; (8000618 <MX_ADC1_Init+0x98>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005ac:	4b1a      	ldr	r3, [pc, #104]	; (8000618 <MX_ADC1_Init+0x98>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005b2:	4b19      	ldr	r3, [pc, #100]	; (8000618 <MX_ADC1_Init+0x98>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ba:	4b17      	ldr	r3, [pc, #92]	; (8000618 <MX_ADC1_Init+0x98>)
 80005bc:	2200      	movs	r2, #0
 80005be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005c0:	4b15      	ldr	r3, [pc, #84]	; (8000618 <MX_ADC1_Init+0x98>)
 80005c2:	4a17      	ldr	r2, [pc, #92]	; (8000620 <MX_ADC1_Init+0xa0>)
 80005c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005c6:	4b14      	ldr	r3, [pc, #80]	; (8000618 <MX_ADC1_Init+0x98>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <MX_ADC1_Init+0x98>)
 80005ce:	2201      	movs	r2, #1
 80005d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005d2:	4b11      	ldr	r3, [pc, #68]	; (8000618 <MX_ADC1_Init+0x98>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005da:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <MX_ADC1_Init+0x98>)
 80005dc:	2201      	movs	r2, #1
 80005de:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005e0:	480d      	ldr	r0, [pc, #52]	; (8000618 <MX_ADC1_Init+0x98>)
 80005e2:	f000 fc8f 	bl	8000f04 <HAL_ADC_Init>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005ec:	f000 f9aa 	bl	8000944 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80005f0:	2304      	movs	r3, #4
 80005f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005f4:	2301      	movs	r3, #1
 80005f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005fc:	463b      	mov	r3, r7
 80005fe:	4619      	mov	r1, r3
 8000600:	4805      	ldr	r0, [pc, #20]	; (8000618 <MX_ADC1_Init+0x98>)
 8000602:	f000 fcc3 	bl	8000f8c <HAL_ADC_ConfigChannel>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800060c:	f000 f99a 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000610:	bf00      	nop
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000098 	.word	0x20000098
 800061c:	40012000 	.word	0x40012000
 8000620:	0f000001 	.word	0x0f000001

08000624 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08a      	sub	sp, #40	; 0x28
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a17      	ldr	r2, [pc, #92]	; (80006a0 <HAL_ADC_MspInit+0x7c>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d127      	bne.n	8000696 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]
 800064a:	4a16      	ldr	r2, [pc, #88]	; (80006a4 <HAL_ADC_MspInit+0x80>)
 800064c:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <HAL_ADC_MspInit+0x80>)
 800064e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000654:	6453      	str	r3, [r2, #68]	; 0x44
 8000656:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <HAL_ADC_MspInit+0x80>)
 8000658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800065a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800065e:	613b      	str	r3, [r7, #16]
 8000660:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
 8000666:	4a0f      	ldr	r2, [pc, #60]	; (80006a4 <HAL_ADC_MspInit+0x80>)
 8000668:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <HAL_ADC_MspInit+0x80>)
 800066a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <HAL_ADC_MspInit+0x80>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800067e:	2310      	movs	r3, #16
 8000680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000682:	2303      	movs	r3, #3
 8000684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	4619      	mov	r1, r3
 8000690:	4805      	ldr	r0, [pc, #20]	; (80006a8 <HAL_ADC_MspInit+0x84>)
 8000692:	f001 f83d 	bl	8001710 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000696:	bf00      	nop
 8000698:	3728      	adds	r7, #40	; 0x28
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40012000 	.word	0x40012000
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40020000 	.word	0x40020000

080006ac <MX_GPIO_Init>:
        * EXTI
     PC10   ------> UART4_TX
     PC11   ------> UART4_RX
*/
void MX_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	613b      	str	r3, [r7, #16]
 80006c6:	4a35      	ldr	r2, [pc, #212]	; (800079c <MX_GPIO_Init+0xf0>)
 80006c8:	4b34      	ldr	r3, [pc, #208]	; (800079c <MX_GPIO_Init+0xf0>)
 80006ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b32      	ldr	r3, [pc, #200]	; (800079c <MX_GPIO_Init+0xf0>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006da:	613b      	str	r3, [r7, #16]
 80006dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	4a2e      	ldr	r2, [pc, #184]	; (800079c <MX_GPIO_Init+0xf0>)
 80006e4:	4b2d      	ldr	r3, [pc, #180]	; (800079c <MX_GPIO_Init+0xf0>)
 80006e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b2b      	ldr	r3, [pc, #172]	; (800079c <MX_GPIO_Init+0xf0>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	4a27      	ldr	r2, [pc, #156]	; (800079c <MX_GPIO_Init+0xf0>)
 8000700:	4b26      	ldr	r3, [pc, #152]	; (800079c <MX_GPIO_Init+0xf0>)
 8000702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000704:	f043 0302 	orr.w	r3, r3, #2
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b24      	ldr	r3, [pc, #144]	; (800079c <MX_GPIO_Init+0xf0>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0302 	and.w	r3, r3, #2
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4a20      	ldr	r2, [pc, #128]	; (800079c <MX_GPIO_Init+0xf0>)
 800071c:	4b1f      	ldr	r3, [pc, #124]	; (800079c <MX_GPIO_Init+0xf0>)
 800071e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b1d      	ldr	r3, [pc, #116]	; (800079c <MX_GPIO_Init+0xf0>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	2107      	movs	r1, #7
 8000736:	481a      	ldr	r0, [pc, #104]	; (80007a0 <MX_GPIO_Init+0xf4>)
 8000738:	f001 f984 	bl	8001a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 800073c:	2323      	movs	r3, #35	; 0x23
 800073e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000740:	2300      	movs	r3, #0
 8000742:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	4619      	mov	r1, r3
 800074e:	4815      	ldr	r0, [pc, #84]	; (80007a4 <MX_GPIO_Init+0xf8>)
 8000750:	f000 ffde 	bl	8001710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000754:	2307      	movs	r3, #7
 8000756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000758:	2301      	movs	r3, #1
 800075a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000760:	2300      	movs	r3, #0
 8000762:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4619      	mov	r1, r3
 800076a:	480d      	ldr	r0, [pc, #52]	; (80007a0 <MX_GPIO_Init+0xf4>)
 800076c:	f000 ffd0 	bl	8001710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000770:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000776:	2302      	movs	r3, #2
 8000778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077e:	2303      	movs	r3, #3
 8000780:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000782:	2308      	movs	r3, #8
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	4619      	mov	r1, r3
 800078c:	4806      	ldr	r0, [pc, #24]	; (80007a8 <MX_GPIO_Init+0xfc>)
 800078e:	f000 ffbf 	bl	8001710 <HAL_GPIO_Init>

}
 8000792:	bf00      	nop
 8000794:	3728      	adds	r7, #40	; 0x28
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800
 80007a0:	40020400 	.word	0x40020400
 80007a4:	40020000 	.word	0x40020000
 80007a8:	40020800 	.word	0x40020800

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b2:	f000 fb13 	bl	8000ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b6:	f000 f825 	bl	8000804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ba:	f7ff ff77 	bl	80006ac <MX_GPIO_Init>
  MX_TIM2_Init();
 80007be:	f000 f9cd 	bl	8000b5c <MX_TIM2_Init>
  MX_ADC1_Init();
 80007c2:	f7ff fedd 	bl	8000580 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80007c6:	f000 fa97 	bl	8000cf8 <MX_USART3_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80007ca:	f000 f885 	bl	80008d8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80007ce:	2104      	movs	r1, #4
 80007d0:	4808      	ldr	r0, [pc, #32]	; (80007f4 <main+0x48>)
 80007d2:	f001 fe63 	bl	800249c <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart3, &rx3_data, 1);
 80007d6:	2201      	movs	r2, #1
 80007d8:	4907      	ldr	r1, [pc, #28]	; (80007f8 <main+0x4c>)
 80007da:	4808      	ldr	r0, [pc, #32]	; (80007fc <main+0x50>)
 80007dc:	f002 fd06 	bl	80031ec <HAL_UART_Receive_IT>
  }
  TIM2->ARR = arr;
  TIM2->CCR2 = TIM2->ARR /2;
  */

  uint8_t a = 'a';
 80007e0:	2361      	movs	r3, #97	; 0x61
 80007e2:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 printf("Hello");
 80007e4:	4806      	ldr	r0, [pc, #24]	; (8000800 <main+0x54>)
 80007e6:	f003 facd 	bl	8003d84 <iprintf>
	 HAL_Delay(1000);
 80007ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007ee:	f000 fb67 	bl	8000ec0 <HAL_Delay>
	 printf("Hello");
 80007f2:	e7f7      	b.n	80007e4 <main+0x38>
 80007f4:	200000e4 	.word	0x200000e4
 80007f8:	200000e0 	.word	0x200000e0
 80007fc:	2000012c 	.word	0x2000012c
 8000800:	08004b8c 	.word	0x08004b8c

08000804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b094      	sub	sp, #80	; 0x50
 8000808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080a:	f107 0320 	add.w	r3, r7, #32
 800080e:	2230      	movs	r2, #48	; 0x30
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f003 faae 	bl	8003d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000828:	2300      	movs	r3, #0
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	4a28      	ldr	r2, [pc, #160]	; (80008d0 <SystemClock_Config+0xcc>)
 800082e:	4b28      	ldr	r3, [pc, #160]	; (80008d0 <SystemClock_Config+0xcc>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000836:	6413      	str	r3, [r2, #64]	; 0x40
 8000838:	4b25      	ldr	r3, [pc, #148]	; (80008d0 <SystemClock_Config+0xcc>)
 800083a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000844:	2300      	movs	r3, #0
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	4a22      	ldr	r2, [pc, #136]	; (80008d4 <SystemClock_Config+0xd0>)
 800084a:	4b22      	ldr	r3, [pc, #136]	; (80008d4 <SystemClock_Config+0xd0>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000852:	6013      	str	r3, [r2, #0]
 8000854:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <SystemClock_Config+0xd0>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000860:	2301      	movs	r3, #1
 8000862:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000864:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800086a:	2302      	movs	r3, #2
 800086c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800086e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000872:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000874:	2304      	movs	r3, #4
 8000876:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000878:	23a8      	movs	r3, #168	; 0xa8
 800087a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800087c:	2302      	movs	r3, #2
 800087e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000880:	2304      	movs	r3, #4
 8000882:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000884:	f107 0320 	add.w	r3, r7, #32
 8000888:	4618      	mov	r0, r3
 800088a:	f001 f8f5 	bl	8001a78 <HAL_RCC_OscConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000894:	f000 f856 	bl	8000944 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000898:	230f      	movs	r3, #15
 800089a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800089c:	2302      	movs	r3, #2
 800089e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	2105      	movs	r1, #5
 80008b6:	4618      	mov	r0, r3
 80008b8:	f001 fb56 	bl	8001f68 <HAL_RCC_ClockConfig>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008c2:	f000 f83f 	bl	8000944 <Error_Handler>
  }
}
 80008c6:	bf00      	nop
 80008c8:	3750      	adds	r7, #80	; 0x50
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40007000 	.word	0x40007000

080008d8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80008dc:	2200      	movs	r2, #0
 80008de:	2100      	movs	r1, #0
 80008e0:	2027      	movs	r0, #39	; 0x27
 80008e2:	f000 fe4c 	bl	800157e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 80008e6:	2027      	movs	r0, #39	; 0x27
 80008e8:	f000 fe65 	bl	80015b6 <HAL_NVIC_EnableIRQ>
}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART3){
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a0e      	ldr	r2, [pc, #56]	; (8000938 <HAL_UART_RxCpltCallback+0x48>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d116      	bne.n	8000930 <HAL_UART_RxCpltCallback+0x40>
	  HAL_UART_Receive_IT(&huart3, &rx3_data, 1);
 8000902:	2201      	movs	r2, #1
 8000904:	490d      	ldr	r1, [pc, #52]	; (800093c <HAL_UART_RxCpltCallback+0x4c>)
 8000906:	480e      	ldr	r0, [pc, #56]	; (8000940 <HAL_UART_RxCpltCallback+0x50>)
 8000908:	f002 fc70 	bl	80031ec <HAL_UART_Receive_IT>
	  HAL_UART_Transmit(&huart3, &rx3_data, 1, 10);
 800090c:	230a      	movs	r3, #10
 800090e:	2201      	movs	r2, #1
 8000910:	490a      	ldr	r1, [pc, #40]	; (800093c <HAL_UART_RxCpltCallback+0x4c>)
 8000912:	480b      	ldr	r0, [pc, #44]	; (8000940 <HAL_UART_RxCpltCallback+0x50>)
 8000914:	f002 fbd9 	bl	80030ca <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3, &rx3_data, 1, 10);
 8000918:	230a      	movs	r3, #10
 800091a:	2201      	movs	r2, #1
 800091c:	4907      	ldr	r1, [pc, #28]	; (800093c <HAL_UART_RxCpltCallback+0x4c>)
 800091e:	4808      	ldr	r0, [pc, #32]	; (8000940 <HAL_UART_RxCpltCallback+0x50>)
 8000920:	f002 fbd3 	bl	80030ca <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3, &rx3_data, 1, 10);
 8000924:	230a      	movs	r3, #10
 8000926:	2201      	movs	r2, #1
 8000928:	4904      	ldr	r1, [pc, #16]	; (800093c <HAL_UART_RxCpltCallback+0x4c>)
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <HAL_UART_RxCpltCallback+0x50>)
 800092c:	f002 fbcd 	bl	80030ca <HAL_UART_Transmit>
  }
}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40004800 	.word	0x40004800
 800093c:	200000e0 	.word	0x200000e0
 8000940:	2000012c 	.word	0x2000012c

08000944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000948:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800094a:	e7fe      	b.n	800094a <Error_Handler+0x6>

0800094c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4a10      	ldr	r2, [pc, #64]	; (8000998 <HAL_MspInit+0x4c>)
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <HAL_MspInit+0x4c>)
 800095a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000960:	6453      	str	r3, [r2, #68]	; 0x44
 8000962:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <HAL_MspInit+0x4c>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	4a09      	ldr	r2, [pc, #36]	; (8000998 <HAL_MspInit+0x4c>)
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <HAL_MspInit+0x4c>)
 8000976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800097c:	6413      	str	r3, [r2, #64]	; 0x40
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800

0800099c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <NMI_Handler+0x4>

080009a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <HardFault_Handler+0x4>

080009a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <MemManage_Handler+0x4>

080009ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <BusFault_Handler+0x4>

080009b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <UsageFault_Handler+0x4>

080009ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e8:	f000 fa4a 	bl	8000e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80009f4:	4802      	ldr	r0, [pc, #8]	; (8000a00 <USART3_IRQHandler+0x10>)
 80009f6:	f002 fc29 	bl	800324c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	2000012c 	.word	0x2000012c

08000a04 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b087      	sub	sp, #28
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
 8000a14:	e00a      	b.n	8000a2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a16:	68bc      	ldr	r4, [r7, #8]
 8000a18:	1c63      	adds	r3, r4, #1
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	f3af 8000 	nop.w
 8000a20:	4603      	mov	r3, r0
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	697a      	ldr	r2, [r7, #20]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	dbf0      	blt.n	8000a16 <_read+0x12>
	}

return len;
 8000a34:	687b      	ldr	r3, [r7, #4]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	371c      	adds	r7, #28
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd90      	pop	{r4, r7, pc}

08000a3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b086      	sub	sp, #24
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	60f8      	str	r0, [r7, #12]
 8000a46:	60b9      	str	r1, [r7, #8]
 8000a48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	617b      	str	r3, [r7, #20]
 8000a4e:	e009      	b.n	8000a64 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	1c5a      	adds	r2, r3, #1
 8000a54:	60ba      	str	r2, [r7, #8]
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	3301      	adds	r3, #1
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	697a      	ldr	r2, [r7, #20]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	dbf1      	blt.n	8000a50 <_write+0x12>
	}
	return len;
 8000a6c:	687b      	ldr	r3, [r7, #4]
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a80:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <_sbrk+0x50>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d102      	bne.n	8000a8e <_sbrk+0x16>
		heap_end = &end;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <_sbrk+0x50>)
 8000a8a:	4a10      	ldr	r2, [pc, #64]	; (8000acc <_sbrk+0x54>)
 8000a8c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <_sbrk+0x50>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <_sbrk+0x50>)
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	466a      	mov	r2, sp
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d907      	bls.n	8000ab2 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000aa2:	f003 f93d 	bl	8003d20 <__errno>
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	230c      	movs	r3, #12
 8000aaa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000aac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ab0:	e006      	b.n	8000ac0 <_sbrk+0x48>
	}

	heap_end += incr;
 8000ab2:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <_sbrk+0x50>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4413      	add	r3, r2
 8000aba:	4a03      	ldr	r2, [pc, #12]	; (8000ac8 <_sbrk+0x50>)
 8000abc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000abe:	68fb      	ldr	r3, [r7, #12]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	2000008c 	.word	0x2000008c
 8000acc:	20000178 	.word	0x20000178

08000ad0 <_close>:

int _close(int file)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	return -1;
 8000ad8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000af8:	605a      	str	r2, [r3, #4]
	return 0;
 8000afa:	2300      	movs	r3, #0
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <_isatty>:

int _isatty(int file)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	return 1;
 8000b10:	2301      	movs	r3, #1
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	b085      	sub	sp, #20
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	60f8      	str	r0, [r7, #12]
 8000b26:	60b9      	str	r1, [r7, #8]
 8000b28:	607a      	str	r2, [r7, #4]
	return 0;
 8000b2a:	2300      	movs	r3, #0
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3714      	adds	r7, #20
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b3c:	4a06      	ldr	r2, [pc, #24]	; (8000b58 <SystemInit+0x20>)
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <SystemInit+0x20>)
 8000b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08e      	sub	sp, #56	; 0x38
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b70:	f107 0320 	add.w	r3, r7, #32
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
 8000b88:	615a      	str	r2, [r3, #20]
 8000b8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b8c:	4b2d      	ldr	r3, [pc, #180]	; (8000c44 <MX_TIM2_Init+0xe8>)
 8000b8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2;
 8000b94:	4b2b      	ldr	r3, [pc, #172]	; (8000c44 <MX_TIM2_Init+0xe8>)
 8000b96:	2202      	movs	r2, #2
 8000b98:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9a:	4b2a      	ldr	r3, [pc, #168]	; (8000c44 <MX_TIM2_Init+0xe8>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000ba0:	4b28      	ldr	r3, [pc, #160]	; (8000c44 <MX_TIM2_Init+0xe8>)
 8000ba2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ba6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba8:	4b26      	ldr	r3, [pc, #152]	; (8000c44 <MX_TIM2_Init+0xe8>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bae:	4b25      	ldr	r3, [pc, #148]	; (8000c44 <MX_TIM2_Init+0xe8>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bb4:	4823      	ldr	r0, [pc, #140]	; (8000c44 <MX_TIM2_Init+0xe8>)
 8000bb6:	f001 fbc9 	bl	800234c <HAL_TIM_Base_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000bc0:	f7ff fec0 	bl	8000944 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bce:	4619      	mov	r1, r3
 8000bd0:	481c      	ldr	r0, [pc, #112]	; (8000c44 <MX_TIM2_Init+0xe8>)
 8000bd2:	f001 fde9 	bl	80027a8 <HAL_TIM_ConfigClockSource>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000bdc:	f7ff feb2 	bl	8000944 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000be0:	4818      	ldr	r0, [pc, #96]	; (8000c44 <MX_TIM2_Init+0xe8>)
 8000be2:	f001 fc02 	bl	80023ea <HAL_TIM_PWM_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000bec:	f7ff feaa 	bl	8000944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bf8:	f107 0320 	add.w	r3, r7, #32
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4811      	ldr	r0, [pc, #68]	; (8000c44 <MX_TIM2_Init+0xe8>)
 8000c00:	f002 f99a 	bl	8002f38 <HAL_TIMEx_MasterConfigSynchronization>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000c0a:	f7ff fe9b 	bl	8000944 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c0e:	2360      	movs	r3, #96	; 0x60
 8000c10:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100-1;
 8000c12:	2363      	movs	r3, #99	; 0x63
 8000c14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	2204      	movs	r2, #4
 8000c22:	4619      	mov	r1, r3
 8000c24:	4807      	ldr	r0, [pc, #28]	; (8000c44 <MX_TIM2_Init+0xe8>)
 8000c26:	f001 fd01 	bl	800262c <HAL_TIM_PWM_ConfigChannel>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000c30:	f7ff fe88 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c34:	4803      	ldr	r0, [pc, #12]	; (8000c44 <MX_TIM2_Init+0xe8>)
 8000c36:	f000 f827 	bl	8000c88 <HAL_TIM_MspPostInit>

}
 8000c3a:	bf00      	nop
 8000c3c:	3738      	adds	r7, #56	; 0x38
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200000e4 	.word	0x200000e4

08000c48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c58:	d10d      	bne.n	8000c76 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	4a09      	ldr	r2, [pc, #36]	; (8000c84 <HAL_TIM_Base_MspInit+0x3c>)
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <HAL_TIM_Base_MspInit+0x3c>)
 8000c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <HAL_TIM_Base_MspInit+0x3c>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000c76:	bf00      	nop
 8000c78:	3714      	adds	r7, #20
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800

08000c88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b088      	sub	sp, #32
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ca8:	d11d      	bne.n	8000ce6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60bb      	str	r3, [r7, #8]
 8000cae:	4a10      	ldr	r2, [pc, #64]	; (8000cf0 <HAL_TIM_MspPostInit+0x68>)
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <HAL_TIM_MspPostInit+0x68>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb4:	f043 0302 	orr.w	r3, r3, #2
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <HAL_TIM_MspPostInit+0x68>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cc6:	2308      	movs	r3, #8
 8000cc8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cda:	f107 030c 	add.w	r3, r7, #12
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4804      	ldr	r0, [pc, #16]	; (8000cf4 <HAL_TIM_MspPostInit+0x6c>)
 8000ce2:	f000 fd15 	bl	8001710 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ce6:	bf00      	nop
 8000ce8:	3720      	adds	r7, #32
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40020400 	.word	0x40020400

08000cf8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <MX_USART3_UART_Init+0x4c>)
 8000cfe:	4a12      	ldr	r2, [pc, #72]	; (8000d48 <MX_USART3_UART_Init+0x50>)
 8000d00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d02:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <MX_USART3_UART_Init+0x4c>)
 8000d04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <MX_USART3_UART_Init+0x4c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <MX_USART3_UART_Init+0x4c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d16:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <MX_USART3_UART_Init+0x4c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d1c:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <MX_USART3_UART_Init+0x4c>)
 8000d1e:	220c      	movs	r2, #12
 8000d20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d22:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <MX_USART3_UART_Init+0x4c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <MX_USART3_UART_Init+0x4c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d2e:	4805      	ldr	r0, [pc, #20]	; (8000d44 <MX_USART3_UART_Init+0x4c>)
 8000d30:	f002 f97e 	bl	8003030 <HAL_UART_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d3a:	f7ff fe03 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	2000012c 	.word	0x2000012c
 8000d48:	40004800 	.word	0x40004800

08000d4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	; 0x28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a19      	ldr	r2, [pc, #100]	; (8000dd0 <HAL_UART_MspInit+0x84>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d12c      	bne.n	8000dc8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	613b      	str	r3, [r7, #16]
 8000d72:	4a18      	ldr	r2, [pc, #96]	; (8000dd4 <HAL_UART_MspInit+0x88>)
 8000d74:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <HAL_UART_MspInit+0x88>)
 8000d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <HAL_UART_MspInit+0x88>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	4a11      	ldr	r2, [pc, #68]	; (8000dd4 <HAL_UART_MspInit+0x88>)
 8000d90:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <HAL_UART_MspInit+0x88>)
 8000d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d94:	f043 0302 	orr.w	r3, r3, #2
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <HAL_UART_MspInit+0x88>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000da6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000daa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000db8:	2307      	movs	r3, #7
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <HAL_UART_MspInit+0x8c>)
 8000dc4:	f000 fca4 	bl	8001710 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000dc8:	bf00      	nop
 8000dca:	3728      	adds	r7, #40	; 0x28
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40004800 	.word	0x40004800
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020400 	.word	0x40020400

08000ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000de0:	4a0e      	ldr	r2, [pc, #56]	; (8000e1c <HAL_Init+0x40>)
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <HAL_Init+0x40>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dec:	4a0b      	ldr	r2, [pc, #44]	; (8000e1c <HAL_Init+0x40>)
 8000dee:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <HAL_Init+0x40>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df8:	4a08      	ldr	r2, [pc, #32]	; (8000e1c <HAL_Init+0x40>)
 8000dfa:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <HAL_Init+0x40>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e04:	2003      	movs	r0, #3
 8000e06:	f000 fbaf 	bl	8001568 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f000 f808 	bl	8000e20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e10:	f7ff fd9c 	bl	800094c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40023c00 	.word	0x40023c00

08000e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <HAL_InitTick+0x54>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <HAL_InitTick+0x58>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	4619      	mov	r1, r3
 8000e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 fbc7 	bl	80015d2 <HAL_SYSTICK_Config>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00e      	b.n	8000e6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b0f      	cmp	r3, #15
 8000e52:	d80a      	bhi.n	8000e6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e54:	2200      	movs	r2, #0
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e5c:	f000 fb8f 	bl	800157e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e60:	4a06      	ldr	r2, [pc, #24]	; (8000e7c <HAL_InitTick+0x5c>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e66:	2300      	movs	r3, #0
 8000e68:	e000      	b.n	8000e6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000000 	.word	0x20000000
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	20000004 	.word	0x20000004

08000e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_IncTick+0x20>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4413      	add	r3, r2
 8000e90:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e92:	6013      	str	r3, [r2, #0]
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	20000170 	.word	0x20000170

08000ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <HAL_GetTick+0x14>)
 8000eae:	681b      	ldr	r3, [r3, #0]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000170 	.word	0x20000170

08000ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec8:	f7ff ffee 	bl	8000ea8 <HAL_GetTick>
 8000ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ed8:	d005      	beq.n	8000ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eda:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <HAL_Delay+0x40>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ee6:	bf00      	nop
 8000ee8:	f7ff ffde 	bl	8000ea8 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	1ad2      	subs	r2, r2, r3
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d3f7      	bcc.n	8000ee8 <HAL_Delay+0x28>
  {
  }
}
 8000ef8:	bf00      	nop
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000008 	.word	0x20000008

08000f04 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d101      	bne.n	8000f1a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e033      	b.n	8000f82 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d109      	bne.n	8000f36 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff fb7e 	bl	8000624 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3a:	f003 0310 	and.w	r3, r3, #16
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d118      	bne.n	8000f74 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f4a:	f023 0302 	bic.w	r3, r3, #2
 8000f4e:	f043 0202 	orr.w	r2, r3, #2
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f000 f93c 	bl	80011d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	f023 0303 	bic.w	r3, r3, #3
 8000f6a:	f043 0201 	orr.w	r2, r3, #1
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	641a      	str	r2, [r3, #64]	; 0x40
 8000f72:	e001      	b.n	8000f78 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f8c:	b490      	push	{r4, r7}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d101      	bne.n	8000fa8 <HAL_ADC_ConfigChannel+0x1c>
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	e107      	b.n	80011b8 <HAL_ADC_ConfigChannel+0x22c>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2201      	movs	r2, #1
 8000fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2b09      	cmp	r3, #9
 8000fb6:	d926      	bls.n	8001006 <HAL_ADC_ConfigChannel+0x7a>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	68d9      	ldr	r1, [r3, #12]
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	4603      	mov	r3, r0
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	4403      	add	r3, r0
 8000fd0:	3b1e      	subs	r3, #30
 8000fd2:	2007      	movs	r0, #7
 8000fd4:	fa00 f303 	lsl.w	r3, r0, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	400b      	ands	r3, r1
 8000fdc:	60d3      	str	r3, [r2, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	68d9      	ldr	r1, [r3, #12]
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	6898      	ldr	r0, [r3, #8]
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	461c      	mov	r4, r3
 8000ff4:	4623      	mov	r3, r4
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	4423      	add	r3, r4
 8000ffa:	3b1e      	subs	r3, #30
 8000ffc:	fa00 f303 	lsl.w	r3, r0, r3
 8001000:	430b      	orrs	r3, r1
 8001002:	60d3      	str	r3, [r2, #12]
 8001004:	e023      	b.n	800104e <HAL_ADC_ConfigChannel+0xc2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	6919      	ldr	r1, [r3, #16]
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	b29b      	uxth	r3, r3
 8001016:	4618      	mov	r0, r3
 8001018:	4603      	mov	r3, r0
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	4403      	add	r3, r0
 800101e:	2007      	movs	r0, #7
 8001020:	fa00 f303 	lsl.w	r3, r0, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	400b      	ands	r3, r1
 8001028:	6113      	str	r3, [r2, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	6919      	ldr	r1, [r3, #16]
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	6898      	ldr	r0, [r3, #8]
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	b29b      	uxth	r3, r3
 800103e:	461c      	mov	r4, r3
 8001040:	4623      	mov	r3, r4
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4423      	add	r3, r4
 8001046:	fa00 f303 	lsl.w	r3, r0, r3
 800104a:	430b      	orrs	r3, r1
 800104c:	6113      	str	r3, [r2, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	2b06      	cmp	r3, #6
 8001054:	d824      	bhi.n	80010a0 <HAL_ADC_ConfigChannel+0x114>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6819      	ldr	r1, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685a      	ldr	r2, [r3, #4]
 8001064:	4613      	mov	r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4413      	add	r3, r2
 800106a:	3b05      	subs	r3, #5
 800106c:	221f      	movs	r2, #31
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	4003      	ands	r3, r0
 8001076:	634b      	str	r3, [r1, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6819      	ldr	r1, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	b29b      	uxth	r3, r3
 8001088:	461c      	mov	r4, r3
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685a      	ldr	r2, [r3, #4]
 800108e:	4613      	mov	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4413      	add	r3, r2
 8001094:	3b05      	subs	r3, #5
 8001096:	fa04 f303 	lsl.w	r3, r4, r3
 800109a:	4303      	orrs	r3, r0
 800109c:	634b      	str	r3, [r1, #52]	; 0x34
 800109e:	e04c      	b.n	800113a <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	2b0c      	cmp	r3, #12
 80010a6:	d824      	bhi.n	80010f2 <HAL_ADC_ConfigChannel+0x166>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6819      	ldr	r1, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685a      	ldr	r2, [r3, #4]
 80010b6:	4613      	mov	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4413      	add	r3, r2
 80010bc:	3b23      	subs	r3, #35	; 0x23
 80010be:	221f      	movs	r2, #31
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	4003      	ands	r3, r0
 80010c8:	630b      	str	r3, [r1, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6819      	ldr	r1, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	b29b      	uxth	r3, r3
 80010da:	461c      	mov	r4, r3
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685a      	ldr	r2, [r3, #4]
 80010e0:	4613      	mov	r3, r2
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	4413      	add	r3, r2
 80010e6:	3b23      	subs	r3, #35	; 0x23
 80010e8:	fa04 f303 	lsl.w	r3, r4, r3
 80010ec:	4303      	orrs	r3, r0
 80010ee:	630b      	str	r3, [r1, #48]	; 0x30
 80010f0:	e023      	b.n	800113a <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6819      	ldr	r1, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	4613      	mov	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4413      	add	r3, r2
 8001106:	3b41      	subs	r3, #65	; 0x41
 8001108:	221f      	movs	r2, #31
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	4003      	ands	r3, r0
 8001112:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6819      	ldr	r1, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	b29b      	uxth	r3, r3
 8001124:	461c      	mov	r4, r3
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685a      	ldr	r2, [r3, #4]
 800112a:	4613      	mov	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4413      	add	r3, r2
 8001130:	3b41      	subs	r3, #65	; 0x41
 8001132:	fa04 f303 	lsl.w	r3, r4, r3
 8001136:	4303      	orrs	r3, r0
 8001138:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800113a:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <HAL_ADC_ConfigChannel+0x238>)
 800113c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a21      	ldr	r2, [pc, #132]	; (80011c8 <HAL_ADC_ConfigChannel+0x23c>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d109      	bne.n	800115c <HAL_ADC_ConfigChannel+0x1d0>
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b12      	cmp	r3, #18
 800114e:	d105      	bne.n	800115c <HAL_ADC_ConfigChannel+0x1d0>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a19      	ldr	r2, [pc, #100]	; (80011c8 <HAL_ADC_ConfigChannel+0x23c>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d123      	bne.n	80011ae <HAL_ADC_ConfigChannel+0x222>
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b10      	cmp	r3, #16
 800116c:	d003      	beq.n	8001176 <HAL_ADC_ConfigChannel+0x1ea>
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b11      	cmp	r3, #17
 8001174:	d11b      	bne.n	80011ae <HAL_ADC_ConfigChannel+0x222>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b10      	cmp	r3, #16
 8001188:	d111      	bne.n	80011ae <HAL_ADC_ConfigChannel+0x222>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800118a:	4b10      	ldr	r3, [pc, #64]	; (80011cc <HAL_ADC_ConfigChannel+0x240>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a10      	ldr	r2, [pc, #64]	; (80011d0 <HAL_ADC_ConfigChannel+0x244>)
 8001190:	fba2 2303 	umull	r2, r3, r2, r3
 8001194:	0c9a      	lsrs	r2, r3, #18
 8001196:	4613      	mov	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80011a0:	e002      	b.n	80011a8 <HAL_ADC_ConfigChannel+0x21c>
      {
        counter--;
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	3b01      	subs	r3, #1
 80011a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f9      	bne.n	80011a2 <HAL_ADC_ConfigChannel+0x216>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc90      	pop	{r4, r7}
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	40012300 	.word	0x40012300
 80011c8:	40012000 	.word	0x40012000
 80011cc:	20000000 	.word	0x20000000
 80011d0:	431bde83 	.word	0x431bde83

080011d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011dc:	4b79      	ldr	r3, [pc, #484]	; (80013c4 <ADC_Init+0x1f0>)
 80011de:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	431a      	orrs	r2, r3
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	6812      	ldr	r2, [r2, #0]
 8001202:	6852      	ldr	r2, [r2, #4]
 8001204:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001208:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	6812      	ldr	r2, [r2, #0]
 8001212:	6851      	ldr	r1, [r2, #4]
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	6912      	ldr	r2, [r2, #16]
 8001218:	0212      	lsls	r2, r2, #8
 800121a:	430a      	orrs	r2, r1
 800121c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	6812      	ldr	r2, [r2, #0]
 8001226:	6852      	ldr	r2, [r2, #4]
 8001228:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800122c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	6812      	ldr	r2, [r2, #0]
 8001236:	6851      	ldr	r1, [r2, #4]
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	6892      	ldr	r2, [r2, #8]
 800123c:	430a      	orrs	r2, r1
 800123e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	6812      	ldr	r2, [r2, #0]
 8001248:	6892      	ldr	r2, [r2, #8]
 800124a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800124e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	6812      	ldr	r2, [r2, #0]
 8001258:	6891      	ldr	r1, [r2, #8]
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	68d2      	ldr	r2, [r2, #12]
 800125e:	430a      	orrs	r2, r1
 8001260:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001266:	4a58      	ldr	r2, [pc, #352]	; (80013c8 <ADC_Init+0x1f4>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d022      	beq.n	80012b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	6812      	ldr	r2, [r2, #0]
 8001274:	6892      	ldr	r2, [r2, #8]
 8001276:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800127a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	6812      	ldr	r2, [r2, #0]
 8001284:	6891      	ldr	r1, [r2, #8]
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800128a:	430a      	orrs	r2, r1
 800128c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	6812      	ldr	r2, [r2, #0]
 8001296:	6892      	ldr	r2, [r2, #8]
 8001298:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800129c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	6812      	ldr	r2, [r2, #0]
 80012a6:	6891      	ldr	r1, [r2, #8]
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80012ac:	430a      	orrs	r2, r1
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	e00f      	b.n	80012d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	6812      	ldr	r2, [r2, #0]
 80012ba:	6892      	ldr	r2, [r2, #8]
 80012bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	6812      	ldr	r2, [r2, #0]
 80012ca:	6892      	ldr	r2, [r2, #8]
 80012cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	6812      	ldr	r2, [r2, #0]
 80012da:	6892      	ldr	r2, [r2, #8]
 80012dc:	f022 0202 	bic.w	r2, r2, #2
 80012e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	6812      	ldr	r2, [r2, #0]
 80012ea:	6891      	ldr	r1, [r2, #8]
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	7e12      	ldrb	r2, [r2, #24]
 80012f0:	0052      	lsls	r2, r2, #1
 80012f2:	430a      	orrs	r2, r1
 80012f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d01b      	beq.n	8001338 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	6812      	ldr	r2, [r2, #0]
 8001308:	6852      	ldr	r2, [r2, #4]
 800130a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800130e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	6812      	ldr	r2, [r2, #0]
 8001318:	6852      	ldr	r2, [r2, #4]
 800131a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800131e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	6812      	ldr	r2, [r2, #0]
 8001328:	6851      	ldr	r1, [r2, #4]
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800132e:	3a01      	subs	r2, #1
 8001330:	0352      	lsls	r2, r2, #13
 8001332:	430a      	orrs	r2, r1
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	e007      	b.n	8001348 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	6812      	ldr	r2, [r2, #0]
 8001340:	6852      	ldr	r2, [r2, #4]
 8001342:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001346:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	6812      	ldr	r2, [r2, #0]
 8001350:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001352:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001356:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	6812      	ldr	r2, [r2, #0]
 8001360:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	69d2      	ldr	r2, [r2, #28]
 8001366:	3a01      	subs	r2, #1
 8001368:	0512      	lsls	r2, r2, #20
 800136a:	430a      	orrs	r2, r1
 800136c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	6812      	ldr	r2, [r2, #0]
 8001376:	6892      	ldr	r2, [r2, #8]
 8001378:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800137c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	6812      	ldr	r2, [r2, #0]
 8001386:	6891      	ldr	r1, [r2, #8]
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800138e:	0252      	lsls	r2, r2, #9
 8001390:	430a      	orrs	r2, r1
 8001392:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	6812      	ldr	r2, [r2, #0]
 800139c:	6892      	ldr	r2, [r2, #8]
 800139e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	6812      	ldr	r2, [r2, #0]
 80013ac:	6891      	ldr	r1, [r2, #8]
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	6952      	ldr	r2, [r2, #20]
 80013b2:	0292      	lsls	r2, r2, #10
 80013b4:	430a      	orrs	r2, r1
 80013b6:	609a      	str	r2, [r3, #8]
}
 80013b8:	bf00      	nop
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	40012300 	.word	0x40012300
 80013c8:	0f000001 	.word	0x0f000001

080013cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <__NVIC_SetPriorityGrouping+0x44>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e8:	4013      	ands	r3, r2
 80013ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013fe:	4a04      	ldr	r2, [pc, #16]	; (8001410 <__NVIC_SetPriorityGrouping+0x44>)
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	60d3      	str	r3, [r2, #12]
}
 8001404:	bf00      	nop
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001418:	4b04      	ldr	r3, [pc, #16]	; (800142c <__NVIC_GetPriorityGrouping+0x18>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	0a1b      	lsrs	r3, r3, #8
 800141e:	f003 0307 	and.w	r3, r3, #7
}
 8001422:	4618      	mov	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	2b00      	cmp	r3, #0
 8001440:	db0b      	blt.n	800145a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001442:	4909      	ldr	r1, [pc, #36]	; (8001468 <__NVIC_EnableIRQ+0x38>)
 8001444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001448:	095b      	lsrs	r3, r3, #5
 800144a:	79fa      	ldrb	r2, [r7, #7]
 800144c:	f002 021f 	and.w	r2, r2, #31
 8001450:	2001      	movs	r0, #1
 8001452:	fa00 f202 	lsl.w	r2, r0, r2
 8001456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000e100 	.word	0xe000e100

0800146c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	6039      	str	r1, [r7, #0]
 8001476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147c:	2b00      	cmp	r3, #0
 800147e:	db0a      	blt.n	8001496 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001480:	490d      	ldr	r1, [pc, #52]	; (80014b8 <__NVIC_SetPriority+0x4c>)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	0112      	lsls	r2, r2, #4
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	440b      	add	r3, r1
 8001490:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001494:	e00a      	b.n	80014ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001496:	4909      	ldr	r1, [pc, #36]	; (80014bc <__NVIC_SetPriority+0x50>)
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	f003 030f 	and.w	r3, r3, #15
 800149e:	3b04      	subs	r3, #4
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	b2d2      	uxtb	r2, r2
 80014a4:	0112      	lsls	r2, r2, #4
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	440b      	add	r3, r1
 80014aa:	761a      	strb	r2, [r3, #24]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000e100 	.word	0xe000e100
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b089      	sub	sp, #36	; 0x24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	f1c3 0307 	rsb	r3, r3, #7
 80014da:	2b04      	cmp	r3, #4
 80014dc:	bf28      	it	cs
 80014de:	2304      	movcs	r3, #4
 80014e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3304      	adds	r3, #4
 80014e6:	2b06      	cmp	r3, #6
 80014e8:	d902      	bls.n	80014f0 <NVIC_EncodePriority+0x30>
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3b03      	subs	r3, #3
 80014ee:	e000      	b.n	80014f2 <NVIC_EncodePriority+0x32>
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f4:	2201      	movs	r2, #1
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	1e5a      	subs	r2, r3, #1
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	401a      	ands	r2, r3
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001506:	2101      	movs	r1, #1
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	fa01 f303 	lsl.w	r3, r1, r3
 800150e:	1e59      	subs	r1, r3, #1
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001514:	4313      	orrs	r3, r2
         );
}
 8001516:	4618      	mov	r0, r3
 8001518:	3724      	adds	r7, #36	; 0x24
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3b01      	subs	r3, #1
 8001530:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001534:	d301      	bcc.n	800153a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001536:	2301      	movs	r3, #1
 8001538:	e00f      	b.n	800155a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800153a:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <SysTick_Config+0x40>)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3b01      	subs	r3, #1
 8001540:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001542:	210f      	movs	r1, #15
 8001544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001548:	f7ff ff90 	bl	800146c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <SysTick_Config+0x40>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001552:	4b04      	ldr	r3, [pc, #16]	; (8001564 <SysTick_Config+0x40>)
 8001554:	2207      	movs	r2, #7
 8001556:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	e000e010 	.word	0xe000e010

08001568 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff ff2b 	bl	80013cc <__NVIC_SetPriorityGrouping>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800157e:	b580      	push	{r7, lr}
 8001580:	b086      	sub	sp, #24
 8001582:	af00      	add	r7, sp, #0
 8001584:	4603      	mov	r3, r0
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	607a      	str	r2, [r7, #4]
 800158a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001590:	f7ff ff40 	bl	8001414 <__NVIC_GetPriorityGrouping>
 8001594:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	68b9      	ldr	r1, [r7, #8]
 800159a:	6978      	ldr	r0, [r7, #20]
 800159c:	f7ff ff90 	bl	80014c0 <NVIC_EncodePriority>
 80015a0:	4602      	mov	r2, r0
 80015a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a6:	4611      	mov	r1, r2
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff ff5f 	bl	800146c <__NVIC_SetPriority>
}
 80015ae:	bf00      	nop
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	4603      	mov	r3, r0
 80015be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ff33 	bl	8001430 <__NVIC_EnableIRQ>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff ffa2 	bl	8001524 <SysTick_Config>
 80015e0:	4603      	mov	r3, r0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b084      	sub	sp, #16
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015f8:	f7ff fc56 	bl	8000ea8 <HAL_GetTick>
 80015fc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d008      	beq.n	800161c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2280      	movs	r2, #128	; 0x80
 800160e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e052      	b.n	80016c2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	6812      	ldr	r2, [r2, #0]
 8001624:	6812      	ldr	r2, [r2, #0]
 8001626:	f022 0216 	bic.w	r2, r2, #22
 800162a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	6812      	ldr	r2, [r2, #0]
 8001634:	6952      	ldr	r2, [r2, #20]
 8001636:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800163a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001640:	2b00      	cmp	r3, #0
 8001642:	d103      	bne.n	800164c <HAL_DMA_Abort+0x62>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001648:	2b00      	cmp	r3, #0
 800164a:	d007      	beq.n	800165c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	6812      	ldr	r2, [r2, #0]
 8001654:	6812      	ldr	r2, [r2, #0]
 8001656:	f022 0208 	bic.w	r2, r2, #8
 800165a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	6812      	ldr	r2, [r2, #0]
 8001664:	6812      	ldr	r2, [r2, #0]
 8001666:	f022 0201 	bic.w	r2, r2, #1
 800166a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800166c:	e013      	b.n	8001696 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800166e:	f7ff fc1b 	bl	8000ea8 <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b05      	cmp	r3, #5
 800167a:	d90c      	bls.n	8001696 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2220      	movs	r2, #32
 8001680:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2203      	movs	r2, #3
 800168e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e015      	b.n	80016c2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1e4      	bne.n	800166e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a8:	223f      	movs	r2, #63	; 0x3f
 80016aa:	409a      	lsls	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b083      	sub	sp, #12
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d004      	beq.n	80016e8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2280      	movs	r2, #128	; 0x80
 80016e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e00c      	b.n	8001702 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2205      	movs	r2, #5
 80016ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	6812      	ldr	r2, [r2, #0]
 80016f8:	6812      	ldr	r2, [r2, #0]
 80016fa:	f022 0201 	bic.w	r2, r2, #1
 80016fe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
	...

08001710 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001710:	b480      	push	{r7}
 8001712:	b089      	sub	sp, #36	; 0x24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001722:	2300      	movs	r3, #0
 8001724:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
 800172a:	e16b      	b.n	8001a04 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800172c:	2201      	movs	r2, #1
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	4013      	ands	r3, r2
 800173e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	429a      	cmp	r2, r3
 8001746:	f040 815a 	bne.w	80019fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	2b01      	cmp	r3, #1
 8001754:	d005      	beq.n	8001762 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800175e:	2b02      	cmp	r3, #2
 8001760:	d130      	bne.n	80017c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	2203      	movs	r2, #3
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4013      	ands	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	68da      	ldr	r2, [r3, #12]
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4313      	orrs	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001798:	2201      	movs	r2, #1
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	091b      	lsrs	r3, r3, #4
 80017ae:	f003 0201 	and.w	r2, r3, #1
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 0303 	and.w	r3, r3, #3
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	d017      	beq.n	8001800 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	2203      	movs	r2, #3
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f003 0303 	and.w	r3, r3, #3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d123      	bne.n	8001854 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	08da      	lsrs	r2, r3, #3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3208      	adds	r2, #8
 8001814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001818:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	f003 0307 	and.w	r3, r3, #7
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	220f      	movs	r2, #15
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4013      	ands	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	691a      	ldr	r2, [r3, #16]
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4313      	orrs	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	08da      	lsrs	r2, r3, #3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	3208      	adds	r2, #8
 800184e:	69b9      	ldr	r1, [r7, #24]
 8001850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	2203      	movs	r2, #3
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 0203 	and.w	r2, r3, #3
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001890:	2b00      	cmp	r3, #0
 8001892:	f000 80b4 	beq.w	80019fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	4a5f      	ldr	r2, [pc, #380]	; (8001a18 <HAL_GPIO_Init+0x308>)
 800189c:	4b5e      	ldr	r3, [pc, #376]	; (8001a18 <HAL_GPIO_Init+0x308>)
 800189e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a4:	6453      	str	r3, [r2, #68]	; 0x44
 80018a6:	4b5c      	ldr	r3, [pc, #368]	; (8001a18 <HAL_GPIO_Init+0x308>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018b2:	4a5a      	ldr	r2, [pc, #360]	; (8001a1c <HAL_GPIO_Init+0x30c>)
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	089b      	lsrs	r3, r3, #2
 80018b8:	3302      	adds	r3, #2
 80018ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	220f      	movs	r2, #15
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43db      	mvns	r3, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4013      	ands	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a51      	ldr	r2, [pc, #324]	; (8001a20 <HAL_GPIO_Init+0x310>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d02b      	beq.n	8001936 <HAL_GPIO_Init+0x226>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a50      	ldr	r2, [pc, #320]	; (8001a24 <HAL_GPIO_Init+0x314>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d025      	beq.n	8001932 <HAL_GPIO_Init+0x222>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a4f      	ldr	r2, [pc, #316]	; (8001a28 <HAL_GPIO_Init+0x318>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d01f      	beq.n	800192e <HAL_GPIO_Init+0x21e>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a4e      	ldr	r2, [pc, #312]	; (8001a2c <HAL_GPIO_Init+0x31c>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d019      	beq.n	800192a <HAL_GPIO_Init+0x21a>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a4d      	ldr	r2, [pc, #308]	; (8001a30 <HAL_GPIO_Init+0x320>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d013      	beq.n	8001926 <HAL_GPIO_Init+0x216>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a4c      	ldr	r2, [pc, #304]	; (8001a34 <HAL_GPIO_Init+0x324>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d00d      	beq.n	8001922 <HAL_GPIO_Init+0x212>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a4b      	ldr	r2, [pc, #300]	; (8001a38 <HAL_GPIO_Init+0x328>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d007      	beq.n	800191e <HAL_GPIO_Init+0x20e>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a4a      	ldr	r2, [pc, #296]	; (8001a3c <HAL_GPIO_Init+0x32c>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d101      	bne.n	800191a <HAL_GPIO_Init+0x20a>
 8001916:	2307      	movs	r3, #7
 8001918:	e00e      	b.n	8001938 <HAL_GPIO_Init+0x228>
 800191a:	2308      	movs	r3, #8
 800191c:	e00c      	b.n	8001938 <HAL_GPIO_Init+0x228>
 800191e:	2306      	movs	r3, #6
 8001920:	e00a      	b.n	8001938 <HAL_GPIO_Init+0x228>
 8001922:	2305      	movs	r3, #5
 8001924:	e008      	b.n	8001938 <HAL_GPIO_Init+0x228>
 8001926:	2304      	movs	r3, #4
 8001928:	e006      	b.n	8001938 <HAL_GPIO_Init+0x228>
 800192a:	2303      	movs	r3, #3
 800192c:	e004      	b.n	8001938 <HAL_GPIO_Init+0x228>
 800192e:	2302      	movs	r3, #2
 8001930:	e002      	b.n	8001938 <HAL_GPIO_Init+0x228>
 8001932:	2301      	movs	r3, #1
 8001934:	e000      	b.n	8001938 <HAL_GPIO_Init+0x228>
 8001936:	2300      	movs	r3, #0
 8001938:	69fa      	ldr	r2, [r7, #28]
 800193a:	f002 0203 	and.w	r2, r2, #3
 800193e:	0092      	lsls	r2, r2, #2
 8001940:	4093      	lsls	r3, r2
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4313      	orrs	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001948:	4934      	ldr	r1, [pc, #208]	; (8001a1c <HAL_GPIO_Init+0x30c>)
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	089b      	lsrs	r3, r3, #2
 800194e:	3302      	adds	r3, #2
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001956:	4b3a      	ldr	r3, [pc, #232]	; (8001a40 <HAL_GPIO_Init+0x330>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	43db      	mvns	r3, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4013      	ands	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800197a:	4a31      	ldr	r2, [pc, #196]	; (8001a40 <HAL_GPIO_Init+0x330>)
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001980:	4b2f      	ldr	r3, [pc, #188]	; (8001a40 <HAL_GPIO_Init+0x330>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019a4:	4a26      	ldr	r2, [pc, #152]	; (8001a40 <HAL_GPIO_Init+0x330>)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019aa:	4b25      	ldr	r3, [pc, #148]	; (8001a40 <HAL_GPIO_Init+0x330>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	43db      	mvns	r3, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4013      	ands	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019ce:	4a1c      	ldr	r2, [pc, #112]	; (8001a40 <HAL_GPIO_Init+0x330>)
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019d4:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <HAL_GPIO_Init+0x330>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	43db      	mvns	r3, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019f8:	4a11      	ldr	r2, [pc, #68]	; (8001a40 <HAL_GPIO_Init+0x330>)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3301      	adds	r3, #1
 8001a02:	61fb      	str	r3, [r7, #28]
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	2b0f      	cmp	r3, #15
 8001a08:	f67f ae90 	bls.w	800172c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a0c:	bf00      	nop
 8001a0e:	3724      	adds	r7, #36	; 0x24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40013800 	.word	0x40013800
 8001a20:	40020000 	.word	0x40020000
 8001a24:	40020400 	.word	0x40020400
 8001a28:	40020800 	.word	0x40020800
 8001a2c:	40020c00 	.word	0x40020c00
 8001a30:	40021000 	.word	0x40021000
 8001a34:	40021400 	.word	0x40021400
 8001a38:	40021800 	.word	0x40021800
 8001a3c:	40021c00 	.word	0x40021c00
 8001a40:	40013c00 	.word	0x40013c00

08001a44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	807b      	strh	r3, [r7, #2]
 8001a50:	4613      	mov	r3, r2
 8001a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a54:	787b      	ldrb	r3, [r7, #1]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a5a:	887a      	ldrh	r2, [r7, #2]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a60:	e003      	b.n	8001a6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a62:	887b      	ldrh	r3, [r7, #2]
 8001a64:	041a      	lsls	r2, r3, #16
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	619a      	str	r2, [r3, #24]
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e264      	b.n	8001f54 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d075      	beq.n	8001b82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a96:	4ba3      	ldr	r3, [pc, #652]	; (8001d24 <HAL_RCC_OscConfig+0x2ac>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 030c 	and.w	r3, r3, #12
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	d00c      	beq.n	8001abc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aa2:	4ba0      	ldr	r3, [pc, #640]	; (8001d24 <HAL_RCC_OscConfig+0x2ac>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d112      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aae:	4b9d      	ldr	r3, [pc, #628]	; (8001d24 <HAL_RCC_OscConfig+0x2ac>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ab6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001aba:	d10b      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001abc:	4b99      	ldr	r3, [pc, #612]	; (8001d24 <HAL_RCC_OscConfig+0x2ac>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d05b      	beq.n	8001b80 <HAL_RCC_OscConfig+0x108>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d157      	bne.n	8001b80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e23f      	b.n	8001f54 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001adc:	d106      	bne.n	8001aec <HAL_RCC_OscConfig+0x74>
 8001ade:	4a91      	ldr	r2, [pc, #580]	; (8001d24 <HAL_RCC_OscConfig+0x2ac>)
 8001ae0:	4b90      	ldr	r3, [pc, #576]	; (8001d24 <HAL_RCC_OscConfig+0x2ac>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	e01d      	b.n	8001b28 <HAL_RCC_OscConfig+0xb0>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001af4:	d10c      	bne.n	8001b10 <HAL_RCC_OscConfig+0x98>
 8001af6:	4a8b      	ldr	r2, [pc, #556]	; (8001d24 <HAL_RCC_OscConfig+0x2ac>)
 8001af8:	4b8a      	ldr	r3, [pc, #552]	; (8001d24 <HAL_RCC_OscConfig+0x2ac>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	4a88      	ldr	r2, [pc, #544]	; (8001d24 <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	4b87      	ldr	r3, [pc, #540]	; (8001d24 <HAL_RCC_OscConfig+0x2ac>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	e00b      	b.n	8001b28 <HAL_RCC_OscConfig+0xb0>
 8001b10:	4a84      	ldr	r2, [pc, #528]	; (8001d24 <HAL_RCC_OscConfig+0x2ac>)
 8001b12:	4b84      	ldr	r3, [pc, #528]	; (8001d24 <HAL_RCC_OscConfig+0x2ac>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b1a:	6013      	str	r3, [r2, #0]
 8001b1c:	4a81      	ldr	r2, [pc, #516]	; (8001d24 <HAL_RCC_OscConfig+0x2ac>)
 8001b1e:	4b81      	ldr	r3, [pc, #516]	; (8001d24 <HAL_RCC_OscConfig+0x2ac>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d013      	beq.n	8001b58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b30:	f7ff f9ba 	bl	8000ea8 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b38:	f7ff f9b6 	bl	8000ea8 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b64      	cmp	r3, #100	; 0x64
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e204      	b.n	8001f54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4a:	4b76      	ldr	r3, [pc, #472]	; (8001d24 <HAL_RCC_OscConfig+0x2ac>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0f0      	beq.n	8001b38 <HAL_RCC_OscConfig+0xc0>
 8001b56:	e014      	b.n	8001b82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b58:	f7ff f9a6 	bl	8000ea8 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b60:	f7ff f9a2 	bl	8000ea8 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b64      	cmp	r3, #100	; 0x64
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e1f0      	b.n	8001f54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b72:	4b6c      	ldr	r3, [pc, #432]	; (8001d24 <HAL_RCC_OscConfig+0x2ac>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f0      	bne.n	8001b60 <HAL_RCC_OscConfig+0xe8>
 8001b7e:	e000      	b.n	8001b82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d063      	beq.n	8001c56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b8e:	4b65      	ldr	r3, [pc, #404]	; (8001d24 <HAL_RCC_OscConfig+0x2ac>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 030c 	and.w	r3, r3, #12
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d00b      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b9a:	4b62      	ldr	r3, [pc, #392]	; (8001d24 <HAL_RCC_OscConfig+0x2ac>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ba2:	2b08      	cmp	r3, #8
 8001ba4:	d11c      	bne.n	8001be0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ba6:	4b5f      	ldr	r3, [pc, #380]	; (8001d24 <HAL_RCC_OscConfig+0x2ac>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d116      	bne.n	8001be0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bb2:	4b5c      	ldr	r3, [pc, #368]	; (8001d24 <HAL_RCC_OscConfig+0x2ac>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d005      	beq.n	8001bca <HAL_RCC_OscConfig+0x152>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d001      	beq.n	8001bca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e1c4      	b.n	8001f54 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bca:	4956      	ldr	r1, [pc, #344]	; (8001d24 <HAL_RCC_OscConfig+0x2ac>)
 8001bcc:	4b55      	ldr	r3, [pc, #340]	; (8001d24 <HAL_RCC_OscConfig+0x2ac>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bde:	e03a      	b.n	8001c56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d020      	beq.n	8001c2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001be8:	4b4f      	ldr	r3, [pc, #316]	; (8001d28 <HAL_RCC_OscConfig+0x2b0>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bee:	f7ff f95b 	bl	8000ea8 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bf6:	f7ff f957 	bl	8000ea8 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e1a5      	b.n	8001f54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c08:	4b46      	ldr	r3, [pc, #280]	; (8001d24 <HAL_RCC_OscConfig+0x2ac>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0f0      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c14:	4943      	ldr	r1, [pc, #268]	; (8001d24 <HAL_RCC_OscConfig+0x2ac>)
 8001c16:	4b43      	ldr	r3, [pc, #268]	; (8001d24 <HAL_RCC_OscConfig+0x2ac>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	4313      	orrs	r3, r2
 8001c26:	600b      	str	r3, [r1, #0]
 8001c28:	e015      	b.n	8001c56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c2a:	4b3f      	ldr	r3, [pc, #252]	; (8001d28 <HAL_RCC_OscConfig+0x2b0>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c30:	f7ff f93a 	bl	8000ea8 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c38:	f7ff f936 	bl	8000ea8 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e184      	b.n	8001f54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c4a:	4b36      	ldr	r3, [pc, #216]	; (8001d24 <HAL_RCC_OscConfig+0x2ac>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d030      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d016      	beq.n	8001c98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c6a:	4b30      	ldr	r3, [pc, #192]	; (8001d2c <HAL_RCC_OscConfig+0x2b4>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c70:	f7ff f91a 	bl	8000ea8 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c78:	f7ff f916 	bl	8000ea8 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e164      	b.n	8001f54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c8a:	4b26      	ldr	r3, [pc, #152]	; (8001d24 <HAL_RCC_OscConfig+0x2ac>)
 8001c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0f0      	beq.n	8001c78 <HAL_RCC_OscConfig+0x200>
 8001c96:	e015      	b.n	8001cc4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c98:	4b24      	ldr	r3, [pc, #144]	; (8001d2c <HAL_RCC_OscConfig+0x2b4>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c9e:	f7ff f903 	bl	8000ea8 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ca6:	f7ff f8ff 	bl	8000ea8 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e14d      	b.n	8001f54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cb8:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <HAL_RCC_OscConfig+0x2ac>)
 8001cba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1f0      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 80a0 	beq.w	8001e12 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cd6:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <HAL_RCC_OscConfig+0x2ac>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10f      	bne.n	8001d02 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	4a0f      	ldr	r2, [pc, #60]	; (8001d24 <HAL_RCC_OscConfig+0x2ac>)
 8001ce8:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <HAL_RCC_OscConfig+0x2ac>)
 8001cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf2:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <HAL_RCC_OscConfig+0x2ac>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d02:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <HAL_RCC_OscConfig+0x2b8>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d121      	bne.n	8001d52 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d0e:	4a08      	ldr	r2, [pc, #32]	; (8001d30 <HAL_RCC_OscConfig+0x2b8>)
 8001d10:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <HAL_RCC_OscConfig+0x2b8>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d1a:	f7ff f8c5 	bl	8000ea8 <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d20:	e011      	b.n	8001d46 <HAL_RCC_OscConfig+0x2ce>
 8001d22:	bf00      	nop
 8001d24:	40023800 	.word	0x40023800
 8001d28:	42470000 	.word	0x42470000
 8001d2c:	42470e80 	.word	0x42470e80
 8001d30:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d34:	f7ff f8b8 	bl	8000ea8 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e106      	b.n	8001f54 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d46:	4b85      	ldr	r3, [pc, #532]	; (8001f5c <HAL_RCC_OscConfig+0x4e4>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0f0      	beq.n	8001d34 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d106      	bne.n	8001d68 <HAL_RCC_OscConfig+0x2f0>
 8001d5a:	4a81      	ldr	r2, [pc, #516]	; (8001f60 <HAL_RCC_OscConfig+0x4e8>)
 8001d5c:	4b80      	ldr	r3, [pc, #512]	; (8001f60 <HAL_RCC_OscConfig+0x4e8>)
 8001d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	6713      	str	r3, [r2, #112]	; 0x70
 8001d66:	e01c      	b.n	8001da2 <HAL_RCC_OscConfig+0x32a>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	2b05      	cmp	r3, #5
 8001d6e:	d10c      	bne.n	8001d8a <HAL_RCC_OscConfig+0x312>
 8001d70:	4a7b      	ldr	r2, [pc, #492]	; (8001f60 <HAL_RCC_OscConfig+0x4e8>)
 8001d72:	4b7b      	ldr	r3, [pc, #492]	; (8001f60 <HAL_RCC_OscConfig+0x4e8>)
 8001d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d76:	f043 0304 	orr.w	r3, r3, #4
 8001d7a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d7c:	4a78      	ldr	r2, [pc, #480]	; (8001f60 <HAL_RCC_OscConfig+0x4e8>)
 8001d7e:	4b78      	ldr	r3, [pc, #480]	; (8001f60 <HAL_RCC_OscConfig+0x4e8>)
 8001d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	6713      	str	r3, [r2, #112]	; 0x70
 8001d88:	e00b      	b.n	8001da2 <HAL_RCC_OscConfig+0x32a>
 8001d8a:	4a75      	ldr	r2, [pc, #468]	; (8001f60 <HAL_RCC_OscConfig+0x4e8>)
 8001d8c:	4b74      	ldr	r3, [pc, #464]	; (8001f60 <HAL_RCC_OscConfig+0x4e8>)
 8001d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d90:	f023 0301 	bic.w	r3, r3, #1
 8001d94:	6713      	str	r3, [r2, #112]	; 0x70
 8001d96:	4a72      	ldr	r2, [pc, #456]	; (8001f60 <HAL_RCC_OscConfig+0x4e8>)
 8001d98:	4b71      	ldr	r3, [pc, #452]	; (8001f60 <HAL_RCC_OscConfig+0x4e8>)
 8001d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d9c:	f023 0304 	bic.w	r3, r3, #4
 8001da0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d015      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001daa:	f7ff f87d 	bl	8000ea8 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db0:	e00a      	b.n	8001dc8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001db2:	f7ff f879 	bl	8000ea8 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e0c5      	b.n	8001f54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc8:	4b65      	ldr	r3, [pc, #404]	; (8001f60 <HAL_RCC_OscConfig+0x4e8>)
 8001dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d0ee      	beq.n	8001db2 <HAL_RCC_OscConfig+0x33a>
 8001dd4:	e014      	b.n	8001e00 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd6:	f7ff f867 	bl	8000ea8 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ddc:	e00a      	b.n	8001df4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dde:	f7ff f863 	bl	8000ea8 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e0af      	b.n	8001f54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001df4:	4b5a      	ldr	r3, [pc, #360]	; (8001f60 <HAL_RCC_OscConfig+0x4e8>)
 8001df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1ee      	bne.n	8001dde <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e00:	7dfb      	ldrb	r3, [r7, #23]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d105      	bne.n	8001e12 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e06:	4a56      	ldr	r2, [pc, #344]	; (8001f60 <HAL_RCC_OscConfig+0x4e8>)
 8001e08:	4b55      	ldr	r3, [pc, #340]	; (8001f60 <HAL_RCC_OscConfig+0x4e8>)
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 809b 	beq.w	8001f52 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e1c:	4b50      	ldr	r3, [pc, #320]	; (8001f60 <HAL_RCC_OscConfig+0x4e8>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 030c 	and.w	r3, r3, #12
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	d05c      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d141      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e30:	4b4c      	ldr	r3, [pc, #304]	; (8001f64 <HAL_RCC_OscConfig+0x4ec>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e36:	f7ff f837 	bl	8000ea8 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e3e:	f7ff f833 	bl	8000ea8 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e081      	b.n	8001f54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e50:	4b43      	ldr	r3, [pc, #268]	; (8001f60 <HAL_RCC_OscConfig+0x4e8>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1f0      	bne.n	8001e3e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e5c:	4940      	ldr	r1, [pc, #256]	; (8001f60 <HAL_RCC_OscConfig+0x4e8>)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69da      	ldr	r2, [r3, #28]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6c:	019b      	lsls	r3, r3, #6
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e74:	085b      	lsrs	r3, r3, #1
 8001e76:	3b01      	subs	r3, #1
 8001e78:	041b      	lsls	r3, r3, #16
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e80:	061b      	lsls	r3, r3, #24
 8001e82:	4313      	orrs	r3, r2
 8001e84:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e86:	4b37      	ldr	r3, [pc, #220]	; (8001f64 <HAL_RCC_OscConfig+0x4ec>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8c:	f7ff f80c 	bl	8000ea8 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e94:	f7ff f808 	bl	8000ea8 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e056      	b.n	8001f54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ea6:	4b2e      	ldr	r3, [pc, #184]	; (8001f60 <HAL_RCC_OscConfig+0x4e8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0f0      	beq.n	8001e94 <HAL_RCC_OscConfig+0x41c>
 8001eb2:	e04e      	b.n	8001f52 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb4:	4b2b      	ldr	r3, [pc, #172]	; (8001f64 <HAL_RCC_OscConfig+0x4ec>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eba:	f7fe fff5 	bl	8000ea8 <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec2:	f7fe fff1 	bl	8000ea8 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e03f      	b.n	8001f54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ed4:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <HAL_RCC_OscConfig+0x4e8>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1f0      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x44a>
 8001ee0:	e037      	b.n	8001f52 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d101      	bne.n	8001eee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e032      	b.n	8001f54 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001eee:	4b1c      	ldr	r3, [pc, #112]	; (8001f60 <HAL_RCC_OscConfig+0x4e8>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d028      	beq.n	8001f4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d121      	bne.n	8001f4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d11a      	bne.n	8001f4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f1e:	4013      	ands	r3, r2
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f24:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d111      	bne.n	8001f4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f34:	085b      	lsrs	r3, r3, #1
 8001f36:	3b01      	subs	r3, #1
 8001f38:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d107      	bne.n	8001f4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f48:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d001      	beq.n	8001f52 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e000      	b.n	8001f54 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40007000 	.word	0x40007000
 8001f60:	40023800 	.word	0x40023800
 8001f64:	42470060 	.word	0x42470060

08001f68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e0cc      	b.n	8002116 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f7c:	4b68      	ldr	r3, [pc, #416]	; (8002120 <HAL_RCC_ClockConfig+0x1b8>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0207 	and.w	r2, r3, #7
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d20c      	bcs.n	8001fa4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8a:	4b65      	ldr	r3, [pc, #404]	; (8002120 <HAL_RCC_ClockConfig+0x1b8>)
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f92:	4b63      	ldr	r3, [pc, #396]	; (8002120 <HAL_RCC_ClockConfig+0x1b8>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0207 	and.w	r2, r3, #7
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d001      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e0b8      	b.n	8002116 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d020      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d005      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fbc:	4a59      	ldr	r2, [pc, #356]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbe:	4b59      	ldr	r3, [pc, #356]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0308 	and.w	r3, r3, #8
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d005      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fd4:	4a53      	ldr	r2, [pc, #332]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd6:	4b53      	ldr	r3, [pc, #332]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe0:	4950      	ldr	r1, [pc, #320]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe2:	4b50      	ldr	r3, [pc, #320]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d044      	beq.n	8002088 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d107      	bne.n	8002016 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002006:	4b47      	ldr	r3, [pc, #284]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d119      	bne.n	8002046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e07f      	b.n	8002116 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b02      	cmp	r3, #2
 800201c:	d003      	beq.n	8002026 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002022:	2b03      	cmp	r3, #3
 8002024:	d107      	bne.n	8002036 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002026:	4b3f      	ldr	r3, [pc, #252]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d109      	bne.n	8002046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e06f      	b.n	8002116 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002036:	4b3b      	ldr	r3, [pc, #236]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e067      	b.n	8002116 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002046:	4937      	ldr	r1, [pc, #220]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8002048:	4b36      	ldr	r3, [pc, #216]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f023 0203 	bic.w	r2, r3, #3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	4313      	orrs	r3, r2
 8002056:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002058:	f7fe ff26 	bl	8000ea8 <HAL_GetTick>
 800205c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205e:	e00a      	b.n	8002076 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002060:	f7fe ff22 	bl	8000ea8 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	f241 3288 	movw	r2, #5000	; 0x1388
 800206e:	4293      	cmp	r3, r2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e04f      	b.n	8002116 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002076:	4b2b      	ldr	r3, [pc, #172]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 020c 	and.w	r2, r3, #12
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	429a      	cmp	r2, r3
 8002086:	d1eb      	bne.n	8002060 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002088:	4b25      	ldr	r3, [pc, #148]	; (8002120 <HAL_RCC_ClockConfig+0x1b8>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0207 	and.w	r2, r3, #7
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	d90c      	bls.n	80020b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002096:	4b22      	ldr	r3, [pc, #136]	; (8002120 <HAL_RCC_ClockConfig+0x1b8>)
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800209e:	4b20      	ldr	r3, [pc, #128]	; (8002120 <HAL_RCC_ClockConfig+0x1b8>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0207 	and.w	r2, r3, #7
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d001      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e032      	b.n	8002116 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d008      	beq.n	80020ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020bc:	4919      	ldr	r1, [pc, #100]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 80020be:	4b19      	ldr	r3, [pc, #100]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0308 	and.w	r3, r3, #8
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d009      	beq.n	80020ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020da:	4912      	ldr	r1, [pc, #72]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 80020dc:	4b11      	ldr	r3, [pc, #68]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	4313      	orrs	r3, r2
 80020ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020ee:	f000 f821 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 80020f2:	4601      	mov	r1, r0
 80020f4:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <HAL_RCC_ClockConfig+0x1bc>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	091b      	lsrs	r3, r3, #4
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	4a0a      	ldr	r2, [pc, #40]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8002100:	5cd3      	ldrb	r3, [r2, r3]
 8002102:	fa21 f303 	lsr.w	r3, r1, r3
 8002106:	4a09      	ldr	r2, [pc, #36]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002108:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800210a:	4b09      	ldr	r3, [pc, #36]	; (8002130 <HAL_RCC_ClockConfig+0x1c8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe fe86 	bl	8000e20 <HAL_InitTick>

  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40023c00 	.word	0x40023c00
 8002124:	40023800 	.word	0x40023800
 8002128:	08004b94 	.word	0x08004b94
 800212c:	20000000 	.word	0x20000000
 8002130:	20000004 	.word	0x20000004

08002134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002138:	b08f      	sub	sp, #60	; 0x3c
 800213a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002140:	2300      	movs	r3, #0
 8002142:	637b      	str	r3, [r7, #52]	; 0x34
 8002144:	2300      	movs	r3, #0
 8002146:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800214c:	4b62      	ldr	r3, [pc, #392]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 030c 	and.w	r3, r3, #12
 8002154:	2b04      	cmp	r3, #4
 8002156:	d007      	beq.n	8002168 <HAL_RCC_GetSysClockFreq+0x34>
 8002158:	2b08      	cmp	r3, #8
 800215a:	d008      	beq.n	800216e <HAL_RCC_GetSysClockFreq+0x3a>
 800215c:	2b00      	cmp	r3, #0
 800215e:	f040 80b2 	bne.w	80022c6 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002162:	4b5e      	ldr	r3, [pc, #376]	; (80022dc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002164:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8002166:	e0b1      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002168:	4b5d      	ldr	r3, [pc, #372]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800216a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800216c:	e0ae      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800216e:	4b5a      	ldr	r3, [pc, #360]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002176:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002178:	4b57      	ldr	r3, [pc, #348]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d04e      	beq.n	8002222 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002184:	4b54      	ldr	r3, [pc, #336]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	099b      	lsrs	r3, r3, #6
 800218a:	f04f 0400 	mov.w	r4, #0
 800218e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002192:	f04f 0200 	mov.w	r2, #0
 8002196:	ea01 0103 	and.w	r1, r1, r3
 800219a:	ea02 0204 	and.w	r2, r2, r4
 800219e:	460b      	mov	r3, r1
 80021a0:	4614      	mov	r4, r2
 80021a2:	0160      	lsls	r0, r4, #5
 80021a4:	6278      	str	r0, [r7, #36]	; 0x24
 80021a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80021a8:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80021ac:	6278      	str	r0, [r7, #36]	; 0x24
 80021ae:	015b      	lsls	r3, r3, #5
 80021b0:	623b      	str	r3, [r7, #32]
 80021b2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80021b6:	1a5b      	subs	r3, r3, r1
 80021b8:	eb64 0402 	sbc.w	r4, r4, r2
 80021bc:	ea4f 1984 	mov.w	r9, r4, lsl #6
 80021c0:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 80021c4:	ea4f 1883 	mov.w	r8, r3, lsl #6
 80021c8:	ebb8 0803 	subs.w	r8, r8, r3
 80021cc:	eb69 0904 	sbc.w	r9, r9, r4
 80021d0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021d4:	61fb      	str	r3, [r7, #28]
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021dc:	61fb      	str	r3, [r7, #28]
 80021de:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80021e2:	61bb      	str	r3, [r7, #24]
 80021e4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80021e8:	eb18 0801 	adds.w	r8, r8, r1
 80021ec:	eb49 0902 	adc.w	r9, r9, r2
 80021f0:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80021f4:	617b      	str	r3, [r7, #20]
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80021fc:	617b      	str	r3, [r7, #20]
 80021fe:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8002202:	613b      	str	r3, [r7, #16]
 8002204:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002208:	4640      	mov	r0, r8
 800220a:	4649      	mov	r1, r9
 800220c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800220e:	f04f 0400 	mov.w	r4, #0
 8002212:	461a      	mov	r2, r3
 8002214:	4623      	mov	r3, r4
 8002216:	f7fe f82b 	bl	8000270 <__aeabi_uldivmod>
 800221a:	4603      	mov	r3, r0
 800221c:	460c      	mov	r4, r1
 800221e:	637b      	str	r3, [r7, #52]	; 0x34
 8002220:	e043      	b.n	80022aa <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002222:	4b2d      	ldr	r3, [pc, #180]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	099b      	lsrs	r3, r3, #6
 8002228:	f04f 0400 	mov.w	r4, #0
 800222c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002230:	f04f 0200 	mov.w	r2, #0
 8002234:	ea01 0103 	and.w	r1, r1, r3
 8002238:	ea02 0204 	and.w	r2, r2, r4
 800223c:	460b      	mov	r3, r1
 800223e:	4614      	mov	r4, r2
 8002240:	0160      	lsls	r0, r4, #5
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	015b      	lsls	r3, r3, #5
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002254:	1a5b      	subs	r3, r3, r1
 8002256:	eb64 0402 	sbc.w	r4, r4, r2
 800225a:	01a6      	lsls	r6, r4, #6
 800225c:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8002260:	019d      	lsls	r5, r3, #6
 8002262:	1aed      	subs	r5, r5, r3
 8002264:	eb66 0604 	sbc.w	r6, r6, r4
 8002268:	00f3      	lsls	r3, r6, #3
 800226a:	607b      	str	r3, [r7, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002272:	607b      	str	r3, [r7, #4]
 8002274:	00eb      	lsls	r3, r5, #3
 8002276:	603b      	str	r3, [r7, #0]
 8002278:	e897 0060 	ldmia.w	r7, {r5, r6}
 800227c:	186d      	adds	r5, r5, r1
 800227e:	eb46 0602 	adc.w	r6, r6, r2
 8002282:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8002286:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 800228a:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 800228e:	4655      	mov	r5, sl
 8002290:	465e      	mov	r6, fp
 8002292:	4628      	mov	r0, r5
 8002294:	4631      	mov	r1, r6
 8002296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002298:	f04f 0400 	mov.w	r4, #0
 800229c:	461a      	mov	r2, r3
 800229e:	4623      	mov	r3, r4
 80022a0:	f7fd ffe6 	bl	8000270 <__aeabi_uldivmod>
 80022a4:	4603      	mov	r3, r0
 80022a6:	460c      	mov	r4, r1
 80022a8:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022aa:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	0c1b      	lsrs	r3, r3, #16
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	3301      	adds	r3, #1
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 80022ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022be:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022c4:	e002      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022c6:	4b05      	ldr	r3, [pc, #20]	; (80022dc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80022c8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	373c      	adds	r7, #60	; 0x3c
 80022d2:	46bd      	mov	sp, r7
 80022d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022d8:	40023800 	.word	0x40023800
 80022dc:	00f42400 	.word	0x00f42400
 80022e0:	007a1200 	.word	0x007a1200

080022e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022e8:	4b03      	ldr	r3, [pc, #12]	; (80022f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80022ea:	681b      	ldr	r3, [r3, #0]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	20000000 	.word	0x20000000

080022fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002300:	f7ff fff0 	bl	80022e4 <HAL_RCC_GetHCLKFreq>
 8002304:	4601      	mov	r1, r0
 8002306:	4b05      	ldr	r3, [pc, #20]	; (800231c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	0a9b      	lsrs	r3, r3, #10
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	4a03      	ldr	r2, [pc, #12]	; (8002320 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002312:	5cd3      	ldrb	r3, [r2, r3]
 8002314:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002318:	4618      	mov	r0, r3
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40023800 	.word	0x40023800
 8002320:	08004ba4 	.word	0x08004ba4

08002324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002328:	f7ff ffdc 	bl	80022e4 <HAL_RCC_GetHCLKFreq>
 800232c:	4601      	mov	r1, r0
 800232e:	4b05      	ldr	r3, [pc, #20]	; (8002344 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	0b5b      	lsrs	r3, r3, #13
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	4a03      	ldr	r2, [pc, #12]	; (8002348 <HAL_RCC_GetPCLK2Freq+0x24>)
 800233a:	5cd3      	ldrb	r3, [r2, r3]
 800233c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002340:	4618      	mov	r0, r3
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40023800 	.word	0x40023800
 8002348:	08004ba4 	.word	0x08004ba4

0800234c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e041      	b.n	80023e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d106      	bne.n	8002378 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7fe fc68 	bl	8000c48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2202      	movs	r2, #2
 800237c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3304      	adds	r3, #4
 8002388:	4619      	mov	r1, r3
 800238a:	4610      	mov	r0, r2
 800238c:	f000 fac4 	bl	8002918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e041      	b.n	8002480 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b00      	cmp	r3, #0
 8002406:	d106      	bne.n	8002416 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 f839 	bl	8002488 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2202      	movs	r2, #2
 800241a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	3304      	adds	r3, #4
 8002426:	4619      	mov	r1, r3
 8002428:	4610      	mov	r0, r2
 800242a:	f000 fa75 	bl	8002918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2201      	movs	r2, #1
 8002472:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d109      	bne.n	80024c0 <HAL_TIM_PWM_Start+0x24>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	bf14      	ite	ne
 80024b8:	2301      	movne	r3, #1
 80024ba:	2300      	moveq	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	e022      	b.n	8002506 <HAL_TIM_PWM_Start+0x6a>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d109      	bne.n	80024da <HAL_TIM_PWM_Start+0x3e>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	bf14      	ite	ne
 80024d2:	2301      	movne	r3, #1
 80024d4:	2300      	moveq	r3, #0
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	e015      	b.n	8002506 <HAL_TIM_PWM_Start+0x6a>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d109      	bne.n	80024f4 <HAL_TIM_PWM_Start+0x58>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	bf14      	ite	ne
 80024ec:	2301      	movne	r3, #1
 80024ee:	2300      	moveq	r3, #0
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	e008      	b.n	8002506 <HAL_TIM_PWM_Start+0x6a>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	bf14      	ite	ne
 8002500:	2301      	movne	r3, #1
 8002502:	2300      	moveq	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e07c      	b.n	8002608 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d104      	bne.n	800251e <HAL_TIM_PWM_Start+0x82>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2202      	movs	r2, #2
 8002518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800251c:	e013      	b.n	8002546 <HAL_TIM_PWM_Start+0xaa>
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	2b04      	cmp	r3, #4
 8002522:	d104      	bne.n	800252e <HAL_TIM_PWM_Start+0x92>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2202      	movs	r2, #2
 8002528:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800252c:	e00b      	b.n	8002546 <HAL_TIM_PWM_Start+0xaa>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	2b08      	cmp	r3, #8
 8002532:	d104      	bne.n	800253e <HAL_TIM_PWM_Start+0xa2>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2202      	movs	r2, #2
 8002538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800253c:	e003      	b.n	8002546 <HAL_TIM_PWM_Start+0xaa>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2202      	movs	r2, #2
 8002542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2201      	movs	r2, #1
 800254c:	6839      	ldr	r1, [r7, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f000 fccc 	bl	8002eec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a2d      	ldr	r2, [pc, #180]	; (8002610 <HAL_TIM_PWM_Start+0x174>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d004      	beq.n	8002568 <HAL_TIM_PWM_Start+0xcc>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a2c      	ldr	r2, [pc, #176]	; (8002614 <HAL_TIM_PWM_Start+0x178>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d101      	bne.n	800256c <HAL_TIM_PWM_Start+0xd0>
 8002568:	2301      	movs	r3, #1
 800256a:	e000      	b.n	800256e <HAL_TIM_PWM_Start+0xd2>
 800256c:	2300      	movs	r3, #0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d007      	beq.n	8002582 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6812      	ldr	r2, [r2, #0]
 800257a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800257c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002580:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a22      	ldr	r2, [pc, #136]	; (8002610 <HAL_TIM_PWM_Start+0x174>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d022      	beq.n	80025d2 <HAL_TIM_PWM_Start+0x136>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002594:	d01d      	beq.n	80025d2 <HAL_TIM_PWM_Start+0x136>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a1f      	ldr	r2, [pc, #124]	; (8002618 <HAL_TIM_PWM_Start+0x17c>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d018      	beq.n	80025d2 <HAL_TIM_PWM_Start+0x136>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a1d      	ldr	r2, [pc, #116]	; (800261c <HAL_TIM_PWM_Start+0x180>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d013      	beq.n	80025d2 <HAL_TIM_PWM_Start+0x136>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a1c      	ldr	r2, [pc, #112]	; (8002620 <HAL_TIM_PWM_Start+0x184>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d00e      	beq.n	80025d2 <HAL_TIM_PWM_Start+0x136>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a16      	ldr	r2, [pc, #88]	; (8002614 <HAL_TIM_PWM_Start+0x178>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d009      	beq.n	80025d2 <HAL_TIM_PWM_Start+0x136>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a18      	ldr	r2, [pc, #96]	; (8002624 <HAL_TIM_PWM_Start+0x188>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d004      	beq.n	80025d2 <HAL_TIM_PWM_Start+0x136>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a16      	ldr	r2, [pc, #88]	; (8002628 <HAL_TIM_PWM_Start+0x18c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d111      	bne.n	80025f6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2b06      	cmp	r3, #6
 80025e2:	d010      	beq.n	8002606 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6812      	ldr	r2, [r2, #0]
 80025ec:	6812      	ldr	r2, [r2, #0]
 80025ee:	f042 0201 	orr.w	r2, r2, #1
 80025f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025f4:	e007      	b.n	8002606 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	6812      	ldr	r2, [r2, #0]
 80025fe:	6812      	ldr	r2, [r2, #0]
 8002600:	f042 0201 	orr.w	r2, r2, #1
 8002604:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40010000 	.word	0x40010000
 8002614:	40010400 	.word	0x40010400
 8002618:	40000400 	.word	0x40000400
 800261c:	40000800 	.word	0x40000800
 8002620:	40000c00 	.word	0x40000c00
 8002624:	40014000 	.word	0x40014000
 8002628:	40001800 	.word	0x40001800

0800262c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800263e:	2b01      	cmp	r3, #1
 8002640:	d101      	bne.n	8002646 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002642:	2302      	movs	r3, #2
 8002644:	e0ac      	b.n	80027a0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b0c      	cmp	r3, #12
 8002652:	f200 809f 	bhi.w	8002794 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002656:	a201      	add	r2, pc, #4	; (adr r2, 800265c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265c:	08002691 	.word	0x08002691
 8002660:	08002795 	.word	0x08002795
 8002664:	08002795 	.word	0x08002795
 8002668:	08002795 	.word	0x08002795
 800266c:	080026d1 	.word	0x080026d1
 8002670:	08002795 	.word	0x08002795
 8002674:	08002795 	.word	0x08002795
 8002678:	08002795 	.word	0x08002795
 800267c:	08002713 	.word	0x08002713
 8002680:	08002795 	.word	0x08002795
 8002684:	08002795 	.word	0x08002795
 8002688:	08002795 	.word	0x08002795
 800268c:	08002753 	.word	0x08002753
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68b9      	ldr	r1, [r7, #8]
 8002696:	4618      	mov	r0, r3
 8002698:	f000 f9de 	bl	8002a58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	6812      	ldr	r2, [r2, #0]
 80026a4:	6992      	ldr	r2, [r2, #24]
 80026a6:	f042 0208 	orr.w	r2, r2, #8
 80026aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	6812      	ldr	r2, [r2, #0]
 80026b4:	6992      	ldr	r2, [r2, #24]
 80026b6:	f022 0204 	bic.w	r2, r2, #4
 80026ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	6812      	ldr	r2, [r2, #0]
 80026c4:	6991      	ldr	r1, [r2, #24]
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	6912      	ldr	r2, [r2, #16]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	619a      	str	r2, [r3, #24]
      break;
 80026ce:	e062      	b.n	8002796 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68b9      	ldr	r1, [r7, #8]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 fa2e 	bl	8002b38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	6992      	ldr	r2, [r2, #24]
 80026e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	6812      	ldr	r2, [r2, #0]
 80026f4:	6992      	ldr	r2, [r2, #24]
 80026f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	6812      	ldr	r2, [r2, #0]
 8002704:	6991      	ldr	r1, [r2, #24]
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	6912      	ldr	r2, [r2, #16]
 800270a:	0212      	lsls	r2, r2, #8
 800270c:	430a      	orrs	r2, r1
 800270e:	619a      	str	r2, [r3, #24]
      break;
 8002710:	e041      	b.n	8002796 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68b9      	ldr	r1, [r7, #8]
 8002718:	4618      	mov	r0, r3
 800271a:	f000 fa83 	bl	8002c24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	6812      	ldr	r2, [r2, #0]
 8002726:	69d2      	ldr	r2, [r2, #28]
 8002728:	f042 0208 	orr.w	r2, r2, #8
 800272c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	6812      	ldr	r2, [r2, #0]
 8002736:	69d2      	ldr	r2, [r2, #28]
 8002738:	f022 0204 	bic.w	r2, r2, #4
 800273c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	6812      	ldr	r2, [r2, #0]
 8002746:	69d1      	ldr	r1, [r2, #28]
 8002748:	68ba      	ldr	r2, [r7, #8]
 800274a:	6912      	ldr	r2, [r2, #16]
 800274c:	430a      	orrs	r2, r1
 800274e:	61da      	str	r2, [r3, #28]
      break;
 8002750:	e021      	b.n	8002796 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68b9      	ldr	r1, [r7, #8]
 8002758:	4618      	mov	r0, r3
 800275a:	f000 fad7 	bl	8002d0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	6812      	ldr	r2, [r2, #0]
 8002766:	69d2      	ldr	r2, [r2, #28]
 8002768:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800276c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	6812      	ldr	r2, [r2, #0]
 8002776:	69d2      	ldr	r2, [r2, #28]
 8002778:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800277c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	6812      	ldr	r2, [r2, #0]
 8002786:	69d1      	ldr	r1, [r2, #28]
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	6912      	ldr	r2, [r2, #16]
 800278c:	0212      	lsls	r2, r2, #8
 800278e:	430a      	orrs	r2, r1
 8002790:	61da      	str	r2, [r3, #28]
      break;
 8002792:	e000      	b.n	8002796 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002794:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d101      	bne.n	80027c0 <HAL_TIM_ConfigClockSource+0x18>
 80027bc:	2302      	movs	r3, #2
 80027be:	e0a6      	b.n	800290e <HAL_TIM_ConfigClockSource+0x166>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2202      	movs	r2, #2
 80027cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b40      	cmp	r3, #64	; 0x40
 80027f6:	d067      	beq.n	80028c8 <HAL_TIM_ConfigClockSource+0x120>
 80027f8:	2b40      	cmp	r3, #64	; 0x40
 80027fa:	d80b      	bhi.n	8002814 <HAL_TIM_ConfigClockSource+0x6c>
 80027fc:	2b10      	cmp	r3, #16
 80027fe:	d073      	beq.n	80028e8 <HAL_TIM_ConfigClockSource+0x140>
 8002800:	2b10      	cmp	r3, #16
 8002802:	d802      	bhi.n	800280a <HAL_TIM_ConfigClockSource+0x62>
 8002804:	2b00      	cmp	r3, #0
 8002806:	d06f      	beq.n	80028e8 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002808:	e078      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800280a:	2b20      	cmp	r3, #32
 800280c:	d06c      	beq.n	80028e8 <HAL_TIM_ConfigClockSource+0x140>
 800280e:	2b30      	cmp	r3, #48	; 0x30
 8002810:	d06a      	beq.n	80028e8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002812:	e073      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002814:	2b70      	cmp	r3, #112	; 0x70
 8002816:	d00d      	beq.n	8002834 <HAL_TIM_ConfigClockSource+0x8c>
 8002818:	2b70      	cmp	r3, #112	; 0x70
 800281a:	d804      	bhi.n	8002826 <HAL_TIM_ConfigClockSource+0x7e>
 800281c:	2b50      	cmp	r3, #80	; 0x50
 800281e:	d033      	beq.n	8002888 <HAL_TIM_ConfigClockSource+0xe0>
 8002820:	2b60      	cmp	r3, #96	; 0x60
 8002822:	d041      	beq.n	80028a8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002824:	e06a      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800282a:	d066      	beq.n	80028fa <HAL_TIM_ConfigClockSource+0x152>
 800282c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002830:	d017      	beq.n	8002862 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002832:	e063      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6818      	ldr	r0, [r3, #0]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	6899      	ldr	r1, [r3, #8]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	f000 fb32 	bl	8002eac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002856:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	609a      	str	r2, [r3, #8]
      break;
 8002860:	e04c      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6818      	ldr	r0, [r3, #0]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	6899      	ldr	r1, [r3, #8]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f000 fb1b 	bl	8002eac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	6812      	ldr	r2, [r2, #0]
 800287e:	6892      	ldr	r2, [r2, #8]
 8002880:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002884:	609a      	str	r2, [r3, #8]
      break;
 8002886:	e039      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6818      	ldr	r0, [r3, #0]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	6859      	ldr	r1, [r3, #4]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	461a      	mov	r2, r3
 8002896:	f000 fa8f 	bl	8002db8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2150      	movs	r1, #80	; 0x50
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 fae8 	bl	8002e76 <TIM_ITRx_SetConfig>
      break;
 80028a6:	e029      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6818      	ldr	r0, [r3, #0]
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	6859      	ldr	r1, [r3, #4]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	461a      	mov	r2, r3
 80028b6:	f000 faae 	bl	8002e16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2160      	movs	r1, #96	; 0x60
 80028c0:	4618      	mov	r0, r3
 80028c2:	f000 fad8 	bl	8002e76 <TIM_ITRx_SetConfig>
      break;
 80028c6:	e019      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6818      	ldr	r0, [r3, #0]
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	6859      	ldr	r1, [r3, #4]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	461a      	mov	r2, r3
 80028d6:	f000 fa6f 	bl	8002db8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2140      	movs	r1, #64	; 0x40
 80028e0:	4618      	mov	r0, r3
 80028e2:	f000 fac8 	bl	8002e76 <TIM_ITRx_SetConfig>
      break;
 80028e6:	e009      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4619      	mov	r1, r3
 80028f2:	4610      	mov	r0, r2
 80028f4:	f000 fabf 	bl	8002e76 <TIM_ITRx_SetConfig>
        break;
 80028f8:	e000      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80028fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
	...

08002918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a40      	ldr	r2, [pc, #256]	; (8002a2c <TIM_Base_SetConfig+0x114>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d013      	beq.n	8002958 <TIM_Base_SetConfig+0x40>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002936:	d00f      	beq.n	8002958 <TIM_Base_SetConfig+0x40>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a3d      	ldr	r2, [pc, #244]	; (8002a30 <TIM_Base_SetConfig+0x118>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d00b      	beq.n	8002958 <TIM_Base_SetConfig+0x40>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a3c      	ldr	r2, [pc, #240]	; (8002a34 <TIM_Base_SetConfig+0x11c>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d007      	beq.n	8002958 <TIM_Base_SetConfig+0x40>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a3b      	ldr	r2, [pc, #236]	; (8002a38 <TIM_Base_SetConfig+0x120>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d003      	beq.n	8002958 <TIM_Base_SetConfig+0x40>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a3a      	ldr	r2, [pc, #232]	; (8002a3c <TIM_Base_SetConfig+0x124>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d108      	bne.n	800296a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800295e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	4313      	orrs	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a2f      	ldr	r2, [pc, #188]	; (8002a2c <TIM_Base_SetConfig+0x114>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d02b      	beq.n	80029ca <TIM_Base_SetConfig+0xb2>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002978:	d027      	beq.n	80029ca <TIM_Base_SetConfig+0xb2>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a2c      	ldr	r2, [pc, #176]	; (8002a30 <TIM_Base_SetConfig+0x118>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d023      	beq.n	80029ca <TIM_Base_SetConfig+0xb2>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a2b      	ldr	r2, [pc, #172]	; (8002a34 <TIM_Base_SetConfig+0x11c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d01f      	beq.n	80029ca <TIM_Base_SetConfig+0xb2>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a2a      	ldr	r2, [pc, #168]	; (8002a38 <TIM_Base_SetConfig+0x120>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d01b      	beq.n	80029ca <TIM_Base_SetConfig+0xb2>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a29      	ldr	r2, [pc, #164]	; (8002a3c <TIM_Base_SetConfig+0x124>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d017      	beq.n	80029ca <TIM_Base_SetConfig+0xb2>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a28      	ldr	r2, [pc, #160]	; (8002a40 <TIM_Base_SetConfig+0x128>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d013      	beq.n	80029ca <TIM_Base_SetConfig+0xb2>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a27      	ldr	r2, [pc, #156]	; (8002a44 <TIM_Base_SetConfig+0x12c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d00f      	beq.n	80029ca <TIM_Base_SetConfig+0xb2>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a26      	ldr	r2, [pc, #152]	; (8002a48 <TIM_Base_SetConfig+0x130>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d00b      	beq.n	80029ca <TIM_Base_SetConfig+0xb2>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a25      	ldr	r2, [pc, #148]	; (8002a4c <TIM_Base_SetConfig+0x134>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d007      	beq.n	80029ca <TIM_Base_SetConfig+0xb2>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a24      	ldr	r2, [pc, #144]	; (8002a50 <TIM_Base_SetConfig+0x138>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d003      	beq.n	80029ca <TIM_Base_SetConfig+0xb2>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a23      	ldr	r2, [pc, #140]	; (8002a54 <TIM_Base_SetConfig+0x13c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d108      	bne.n	80029dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4313      	orrs	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a0a      	ldr	r2, [pc, #40]	; (8002a2c <TIM_Base_SetConfig+0x114>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d003      	beq.n	8002a10 <TIM_Base_SetConfig+0xf8>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a0c      	ldr	r2, [pc, #48]	; (8002a3c <TIM_Base_SetConfig+0x124>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d103      	bne.n	8002a18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	691a      	ldr	r2, [r3, #16]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	615a      	str	r2, [r3, #20]
}
 8002a1e:	bf00      	nop
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	40010000 	.word	0x40010000
 8002a30:	40000400 	.word	0x40000400
 8002a34:	40000800 	.word	0x40000800
 8002a38:	40000c00 	.word	0x40000c00
 8002a3c:	40010400 	.word	0x40010400
 8002a40:	40014000 	.word	0x40014000
 8002a44:	40014400 	.word	0x40014400
 8002a48:	40014800 	.word	0x40014800
 8002a4c:	40001800 	.word	0x40001800
 8002a50:	40001c00 	.word	0x40001c00
 8002a54:	40002000 	.word	0x40002000

08002a58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	f023 0201 	bic.w	r2, r3, #1
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f023 0303 	bic.w	r3, r3, #3
 8002a8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f023 0302 	bic.w	r3, r3, #2
 8002aa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a20      	ldr	r2, [pc, #128]	; (8002b30 <TIM_OC1_SetConfig+0xd8>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d003      	beq.n	8002abc <TIM_OC1_SetConfig+0x64>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a1f      	ldr	r2, [pc, #124]	; (8002b34 <TIM_OC1_SetConfig+0xdc>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d10c      	bne.n	8002ad6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f023 0308 	bic.w	r3, r3, #8
 8002ac2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f023 0304 	bic.w	r3, r3, #4
 8002ad4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a15      	ldr	r2, [pc, #84]	; (8002b30 <TIM_OC1_SetConfig+0xd8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d003      	beq.n	8002ae6 <TIM_OC1_SetConfig+0x8e>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a14      	ldr	r2, [pc, #80]	; (8002b34 <TIM_OC1_SetConfig+0xdc>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d111      	bne.n	8002b0a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002aec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002af4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	621a      	str	r2, [r3, #32]
}
 8002b24:	bf00      	nop
 8002b26:	371c      	adds	r7, #28
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	40010000 	.word	0x40010000
 8002b34:	40010400 	.word	0x40010400

08002b38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b087      	sub	sp, #28
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	f023 0210 	bic.w	r2, r3, #16
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	021b      	lsls	r3, r3, #8
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f023 0320 	bic.w	r3, r3, #32
 8002b82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	011b      	lsls	r3, r3, #4
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a22      	ldr	r2, [pc, #136]	; (8002c1c <TIM_OC2_SetConfig+0xe4>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d003      	beq.n	8002ba0 <TIM_OC2_SetConfig+0x68>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a21      	ldr	r2, [pc, #132]	; (8002c20 <TIM_OC2_SetConfig+0xe8>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d10d      	bne.n	8002bbc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ba6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a17      	ldr	r2, [pc, #92]	; (8002c1c <TIM_OC2_SetConfig+0xe4>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d003      	beq.n	8002bcc <TIM_OC2_SetConfig+0x94>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a16      	ldr	r2, [pc, #88]	; (8002c20 <TIM_OC2_SetConfig+0xe8>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d113      	bne.n	8002bf4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	621a      	str	r2, [r3, #32]
}
 8002c0e:	bf00      	nop
 8002c10:	371c      	adds	r7, #28
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	40010000 	.word	0x40010000
 8002c20:	40010400 	.word	0x40010400

08002c24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b087      	sub	sp, #28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f023 0303 	bic.w	r3, r3, #3
 8002c5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	021b      	lsls	r3, r3, #8
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a21      	ldr	r2, [pc, #132]	; (8002d04 <TIM_OC3_SetConfig+0xe0>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d003      	beq.n	8002c8a <TIM_OC3_SetConfig+0x66>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a20      	ldr	r2, [pc, #128]	; (8002d08 <TIM_OC3_SetConfig+0xe4>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d10d      	bne.n	8002ca6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	021b      	lsls	r3, r3, #8
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ca4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a16      	ldr	r2, [pc, #88]	; (8002d04 <TIM_OC3_SetConfig+0xe0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d003      	beq.n	8002cb6 <TIM_OC3_SetConfig+0x92>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a15      	ldr	r2, [pc, #84]	; (8002d08 <TIM_OC3_SetConfig+0xe4>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d113      	bne.n	8002cde <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002cbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	621a      	str	r2, [r3, #32]
}
 8002cf8:	bf00      	nop
 8002cfa:	371c      	adds	r7, #28
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	40010000 	.word	0x40010000
 8002d08:	40010400 	.word	0x40010400

08002d0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b087      	sub	sp, #28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	021b      	lsls	r3, r3, #8
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	031b      	lsls	r3, r3, #12
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a12      	ldr	r2, [pc, #72]	; (8002db0 <TIM_OC4_SetConfig+0xa4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d003      	beq.n	8002d74 <TIM_OC4_SetConfig+0x68>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a11      	ldr	r2, [pc, #68]	; (8002db4 <TIM_OC4_SetConfig+0xa8>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d109      	bne.n	8002d88 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	019b      	lsls	r3, r3, #6
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	621a      	str	r2, [r3, #32]
}
 8002da2:	bf00      	nop
 8002da4:	371c      	adds	r7, #28
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	40010000 	.word	0x40010000
 8002db4:	40010400 	.word	0x40010400

08002db8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b087      	sub	sp, #28
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	f023 0201 	bic.w	r2, r3, #1
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002de2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f023 030a 	bic.w	r3, r3, #10
 8002df4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	621a      	str	r2, [r3, #32]
}
 8002e0a:	bf00      	nop
 8002e0c:	371c      	adds	r7, #28
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b087      	sub	sp, #28
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	60f8      	str	r0, [r7, #12]
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	f023 0210 	bic.w	r2, r3, #16
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	031b      	lsls	r3, r3, #12
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	621a      	str	r2, [r3, #32]
}
 8002e6a:	bf00      	nop
 8002e6c:	371c      	adds	r7, #28
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b085      	sub	sp, #20
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
 8002e7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	f043 0307 	orr.w	r3, r3, #7
 8002e98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	609a      	str	r2, [r3, #8]
}
 8002ea0:	bf00      	nop
 8002ea2:	3714      	adds	r7, #20
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b087      	sub	sp, #28
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
 8002eb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ec6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	021a      	lsls	r2, r3, #8
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	609a      	str	r2, [r3, #8]
}
 8002ee0:	bf00      	nop
 8002ee2:	371c      	adds	r7, #28
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b087      	sub	sp, #28
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	f003 031f 	and.w	r3, r3, #31
 8002efe:	2201      	movs	r2, #1
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6a1a      	ldr	r2, [r3, #32]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	401a      	ands	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6a1a      	ldr	r2, [r3, #32]
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	f003 031f 	and.w	r3, r3, #31
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	fa01 f303 	lsl.w	r3, r1, r3
 8002f24:	431a      	orrs	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	621a      	str	r2, [r3, #32]
}
 8002f2a:	bf00      	nop
 8002f2c:	371c      	adds	r7, #28
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
	...

08002f38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e05a      	b.n	8003006 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a21      	ldr	r2, [pc, #132]	; (8003014 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d022      	beq.n	8002fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f9c:	d01d      	beq.n	8002fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a1d      	ldr	r2, [pc, #116]	; (8003018 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d018      	beq.n	8002fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a1b      	ldr	r2, [pc, #108]	; (800301c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d013      	beq.n	8002fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a1a      	ldr	r2, [pc, #104]	; (8003020 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d00e      	beq.n	8002fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a18      	ldr	r2, [pc, #96]	; (8003024 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d009      	beq.n	8002fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a17      	ldr	r2, [pc, #92]	; (8003028 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d004      	beq.n	8002fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a15      	ldr	r2, [pc, #84]	; (800302c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d10c      	bne.n	8002ff4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fe0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3714      	adds	r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	40010000 	.word	0x40010000
 8003018:	40000400 	.word	0x40000400
 800301c:	40000800 	.word	0x40000800
 8003020:	40000c00 	.word	0x40000c00
 8003024:	40010400 	.word	0x40010400
 8003028:	40014000 	.word	0x40014000
 800302c:	40001800 	.word	0x40001800

08003030 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e03f      	b.n	80030c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d106      	bne.n	800305c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7fd fe78 	bl	8000d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2224      	movs	r2, #36	; 0x24
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6812      	ldr	r2, [r2, #0]
 800306c:	68d2      	ldr	r2, [r2, #12]
 800306e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003072:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 fc79 	bl	800396c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6812      	ldr	r2, [r2, #0]
 8003082:	6912      	ldr	r2, [r2, #16]
 8003084:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003088:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6812      	ldr	r2, [r2, #0]
 8003092:	6952      	ldr	r2, [r2, #20]
 8003094:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003098:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6812      	ldr	r2, [r2, #0]
 80030a2:	68d2      	ldr	r2, [r2, #12]
 80030a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2220      	movs	r2, #32
 80030bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b08a      	sub	sp, #40	; 0x28
 80030ce:	af02      	add	r7, sp, #8
 80030d0:	60f8      	str	r0, [r7, #12]
 80030d2:	60b9      	str	r1, [r7, #8]
 80030d4:	603b      	str	r3, [r7, #0]
 80030d6:	4613      	mov	r3, r2
 80030d8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030da:	2300      	movs	r3, #0
 80030dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b20      	cmp	r3, #32
 80030e8:	d17b      	bne.n	80031e2 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d002      	beq.n	80030f6 <HAL_UART_Transmit+0x2c>
 80030f0:	88fb      	ldrh	r3, [r7, #6]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e074      	b.n	80031e4 <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003100:	2b01      	cmp	r3, #1
 8003102:	d101      	bne.n	8003108 <HAL_UART_Transmit+0x3e>
 8003104:	2302      	movs	r3, #2
 8003106:	e06d      	b.n	80031e4 <HAL_UART_Transmit+0x11a>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2221      	movs	r2, #33	; 0x21
 800311a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800311e:	f7fd fec3 	bl	8000ea8 <HAL_GetTick>
 8003122:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	88fa      	ldrh	r2, [r7, #6]
 8003128:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	88fa      	ldrh	r2, [r7, #6]
 800312e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003138:	d108      	bne.n	800314c <HAL_UART_Transmit+0x82>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d104      	bne.n	800314c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003142:	2300      	movs	r3, #0
 8003144:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	61bb      	str	r3, [r7, #24]
 800314a:	e003      	b.n	8003154 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003150:	2300      	movs	r3, #0
 8003152:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800315c:	e029      	b.n	80031b2 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	2200      	movs	r2, #0
 8003166:	2180      	movs	r1, #128	; 0x80
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 fa3b 	bl	80035e4 <UART_WaitOnFlagUntilTimeout>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e035      	b.n	80031e4 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10a      	bne.n	8003194 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	8812      	ldrh	r2, [r2, #0]
 8003186:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800318a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	3302      	adds	r3, #2
 8003190:	61bb      	str	r3, [r7, #24]
 8003192:	e007      	b.n	80031a4 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	69fa      	ldr	r2, [r7, #28]
 800319a:	7812      	ldrb	r2, [r2, #0]
 800319c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	3301      	adds	r3, #1
 80031a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	3b01      	subs	r3, #1
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1d0      	bne.n	800315e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	2200      	movs	r2, #0
 80031c4:	2140      	movs	r1, #64	; 0x40
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f000 fa0c 	bl	80035e4 <UART_WaitOnFlagUntilTimeout>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <HAL_UART_Transmit+0x10c>
    {
      return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e006      	b.n	80031e4 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2220      	movs	r2, #32
 80031da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80031de:	2300      	movs	r3, #0
 80031e0:	e000      	b.n	80031e4 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80031e2:	2302      	movs	r3, #2
  }
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3720      	adds	r7, #32
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	4613      	mov	r3, r2
 80031f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b20      	cmp	r3, #32
 8003204:	d11d      	bne.n	8003242 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d002      	beq.n	8003212 <HAL_UART_Receive_IT+0x26>
 800320c:	88fb      	ldrh	r3, [r7, #6]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e016      	b.n	8003244 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800321c:	2b01      	cmp	r3, #1
 800321e:	d101      	bne.n	8003224 <HAL_UART_Receive_IT+0x38>
 8003220:	2302      	movs	r3, #2
 8003222:	e00f      	b.n	8003244 <HAL_UART_Receive_IT+0x58>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003232:	88fb      	ldrh	r3, [r7, #6]
 8003234:	461a      	mov	r2, r3
 8003236:	68b9      	ldr	r1, [r7, #8]
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 fa1d 	bl	8003678 <UART_Start_Receive_IT>
 800323e:	4603      	mov	r3, r0
 8003240:	e000      	b.n	8003244 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003242:	2302      	movs	r3, #2
  }
}
 8003244:	4618      	mov	r0, r3
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b08a      	sub	sp, #40	; 0x28
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800326c:	2300      	movs	r3, #0
 800326e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003270:	2300      	movs	r3, #0
 8003272:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10d      	bne.n	800329e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	f003 0320 	and.w	r3, r3, #32
 8003288:	2b00      	cmp	r3, #0
 800328a:	d008      	beq.n	800329e <HAL_UART_IRQHandler+0x52>
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	f003 0320 	and.w	r3, r3, #32
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 fad0 	bl	800383c <UART_Receive_IT>
      return;
 800329c:	e17d      	b.n	800359a <HAL_UART_IRQHandler+0x34e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 80b1 	beq.w	8003408 <HAL_UART_IRQHandler+0x1bc>
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d105      	bne.n	80032bc <HAL_UART_IRQHandler+0x70>
 80032b0:	6a3b      	ldr	r3, [r7, #32]
 80032b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 80a6 	beq.w	8003408 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00a      	beq.n	80032dc <HAL_UART_IRQHandler+0x90>
 80032c6:	6a3b      	ldr	r3, [r7, #32]
 80032c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d005      	beq.n	80032dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	f043 0201 	orr.w	r2, r3, #1
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032de:	f003 0304 	and.w	r3, r3, #4
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00a      	beq.n	80032fc <HAL_UART_IRQHandler+0xb0>
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d005      	beq.n	80032fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f4:	f043 0202 	orr.w	r2, r3, #2
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00a      	beq.n	800331c <HAL_UART_IRQHandler+0xd0>
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d005      	beq.n	800331c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003314:	f043 0204 	orr.w	r2, r3, #4
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00f      	beq.n	8003346 <HAL_UART_IRQHandler+0xfa>
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	f003 0320 	and.w	r3, r3, #32
 800332c:	2b00      	cmp	r3, #0
 800332e:	d104      	bne.n	800333a <HAL_UART_IRQHandler+0xee>
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d005      	beq.n	8003346 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	f043 0208 	orr.w	r2, r3, #8
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 8120 	beq.w	8003590 <HAL_UART_IRQHandler+0x344>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	f003 0320 	and.w	r3, r3, #32
 8003356:	2b00      	cmp	r3, #0
 8003358:	d007      	beq.n	800336a <HAL_UART_IRQHandler+0x11e>
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	f003 0320 	and.w	r3, r3, #32
 8003360:	2b00      	cmp	r3, #0
 8003362:	d002      	beq.n	800336a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 fa69 	bl	800383c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003374:	2b40      	cmp	r3, #64	; 0x40
 8003376:	bf0c      	ite	eq
 8003378:	2301      	moveq	r3, #1
 800337a:	2300      	movne	r3, #0
 800337c:	b2db      	uxtb	r3, r3
 800337e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	f003 0308 	and.w	r3, r3, #8
 8003388:	2b00      	cmp	r3, #0
 800338a:	d102      	bne.n	8003392 <HAL_UART_IRQHandler+0x146>
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d031      	beq.n	80033f6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f9aa 	bl	80036ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a2:	2b40      	cmp	r3, #64	; 0x40
 80033a4:	d123      	bne.n	80033ee <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6812      	ldr	r2, [r2, #0]
 80033ae:	6952      	ldr	r2, [r2, #20]
 80033b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033b4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d013      	beq.n	80033e6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c2:	4a77      	ldr	r2, [pc, #476]	; (80035a0 <HAL_UART_IRQHandler+0x354>)
 80033c4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fe f97d 	bl	80016ca <HAL_DMA_Abort_IT>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d016      	beq.n	8003404 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033e0:	4610      	mov	r0, r2
 80033e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033e4:	e00e      	b.n	8003404 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f8e6 	bl	80035b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ec:	e00a      	b.n	8003404 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f8e2 	bl	80035b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033f4:	e006      	b.n	8003404 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f8de 	bl	80035b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003402:	e0c5      	b.n	8003590 <HAL_UART_IRQHandler+0x344>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003404:	bf00      	nop
    return;
 8003406:	e0c3      	b.n	8003590 <HAL_UART_IRQHandler+0x344>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340c:	2b01      	cmp	r3, #1
 800340e:	f040 80a2 	bne.w	8003556 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	f003 0310 	and.w	r3, r3, #16
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 809c 	beq.w	8003556 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	f003 0310 	and.w	r3, r3, #16
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 8096 	beq.w	8003556 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800342a:	2300      	movs	r3, #0
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	60fb      	str	r3, [r7, #12]
 800343e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344a:	2b40      	cmp	r3, #64	; 0x40
 800344c:	d14f      	bne.n	80034ee <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	827b      	strh	r3, [r7, #18]
      if (  (nb_remaining_rx_data > 0U)
 8003458:	8a7b      	ldrh	r3, [r7, #18]
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 809a 	beq.w	8003594 <HAL_UART_IRQHandler+0x348>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003464:	8a7a      	ldrh	r2, [r7, #18]
 8003466:	429a      	cmp	r2, r3
 8003468:	f080 8094 	bcs.w	8003594 <HAL_UART_IRQHandler+0x348>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	8a7a      	ldrh	r2, [r7, #18]
 8003470:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800347c:	d02b      	beq.n	80034d6 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6812      	ldr	r2, [r2, #0]
 8003486:	68d2      	ldr	r2, [r2, #12]
 8003488:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800348c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6812      	ldr	r2, [r2, #0]
 8003496:	6952      	ldr	r2, [r2, #20]
 8003498:	f022 0201 	bic.w	r2, r2, #1
 800349c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6812      	ldr	r2, [r2, #0]
 80034a6:	6952      	ldr	r2, [r2, #20]
 80034a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034ac:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2220      	movs	r2, #32
 80034b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6812      	ldr	r2, [r2, #0]
 80034c4:	68d2      	ldr	r2, [r2, #12]
 80034c6:	f022 0210 	bic.w	r2, r2, #16
 80034ca:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fe f88a 	bl	80015ea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034de:	b29b      	uxth	r3, r3
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	4619      	mov	r1, r3
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f870 	bl	80035cc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80034ec:	e052      	b.n	8003594 <HAL_UART_IRQHandler+0x348>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	823b      	strh	r3, [r7, #16]
      if (  (huart->RxXferCount > 0U)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003500:	b29b      	uxth	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d048      	beq.n	8003598 <HAL_UART_IRQHandler+0x34c>
          &&(nb_rx_data > 0U) )
 8003506:	8a3b      	ldrh	r3, [r7, #16]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d045      	beq.n	8003598 <HAL_UART_IRQHandler+0x34c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6812      	ldr	r2, [r2, #0]
 8003514:	68d2      	ldr	r2, [r2, #12]
 8003516:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800351a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6812      	ldr	r2, [r2, #0]
 8003524:	6952      	ldr	r2, [r2, #20]
 8003526:	f022 0201 	bic.w	r2, r2, #1
 800352a:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2220      	movs	r2, #32
 8003530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6812      	ldr	r2, [r2, #0]
 8003542:	68d2      	ldr	r2, [r2, #12]
 8003544:	f022 0210 	bic.w	r2, r2, #16
 8003548:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800354a:	8a3b      	ldrh	r3, [r7, #16]
 800354c:	4619      	mov	r1, r3
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f83c 	bl	80035cc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003554:	e020      	b.n	8003598 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800355c:	2b00      	cmp	r3, #0
 800355e:	d008      	beq.n	8003572 <HAL_UART_IRQHandler+0x326>
 8003560:	6a3b      	ldr	r3, [r7, #32]
 8003562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f8ff 	bl	800376e <UART_Transmit_IT>
    return;
 8003570:	e013      	b.n	800359a <HAL_UART_IRQHandler+0x34e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00e      	beq.n	800359a <HAL_UART_IRQHandler+0x34e>
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003582:	2b00      	cmp	r3, #0
 8003584:	d009      	beq.n	800359a <HAL_UART_IRQHandler+0x34e>
  {
    UART_EndTransmit_IT(huart);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f940 	bl	800380c <UART_EndTransmit_IT>
    return;
 800358c:	bf00      	nop
 800358e:	e004      	b.n	800359a <HAL_UART_IRQHandler+0x34e>
    return;
 8003590:	bf00      	nop
 8003592:	e002      	b.n	800359a <HAL_UART_IRQHandler+0x34e>
      return;
 8003594:	bf00      	nop
 8003596:	e000      	b.n	800359a <HAL_UART_IRQHandler+0x34e>
      return;
 8003598:	bf00      	nop
  }
}
 800359a:	3728      	adds	r7, #40	; 0x28
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	08003747 	.word	0x08003747

080035a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	603b      	str	r3, [r7, #0]
 80035f0:	4613      	mov	r3, r2
 80035f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035f4:	e02c      	b.n	8003650 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035fc:	d028      	beq.n	8003650 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d007      	beq.n	8003614 <UART_WaitOnFlagUntilTimeout+0x30>
 8003604:	f7fd fc50 	bl	8000ea8 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	1ad2      	subs	r2, r2, r3
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	429a      	cmp	r2, r3
 8003612:	d91d      	bls.n	8003650 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	6812      	ldr	r2, [r2, #0]
 800361c:	68d2      	ldr	r2, [r2, #12]
 800361e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003622:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	6812      	ldr	r2, [r2, #0]
 800362c:	6952      	ldr	r2, [r2, #20]
 800362e:	f022 0201 	bic.w	r2, r2, #1
 8003632:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2220      	movs	r2, #32
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2220      	movs	r2, #32
 8003640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e00f      	b.n	8003670 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	401a      	ands	r2, r3
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	429a      	cmp	r2, r3
 800365e:	bf0c      	ite	eq
 8003660:	2301      	moveq	r3, #1
 8003662:	2300      	movne	r3, #0
 8003664:	b2db      	uxtb	r3, r3
 8003666:	461a      	mov	r2, r3
 8003668:	79fb      	ldrb	r3, [r7, #7]
 800366a:	429a      	cmp	r2, r3
 800366c:	d0c3      	beq.n	80035f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	4613      	mov	r3, r2
 8003684:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	88fa      	ldrh	r2, [r7, #6]
 8003690:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	88fa      	ldrh	r2, [r7, #6]
 8003696:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2222      	movs	r2, #34	; 0x22
 80036a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	6812      	ldr	r2, [r2, #0]
 80036b6:	68d2      	ldr	r2, [r2, #12]
 80036b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036bc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	6812      	ldr	r2, [r2, #0]
 80036c6:	6952      	ldr	r2, [r2, #20]
 80036c8:	f042 0201 	orr.w	r2, r2, #1
 80036cc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	6812      	ldr	r2, [r2, #0]
 80036d6:	68d2      	ldr	r2, [r2, #12]
 80036d8:	f042 0220 	orr.w	r2, r2, #32
 80036dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3714      	adds	r7, #20
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6812      	ldr	r2, [r2, #0]
 80036fc:	68d2      	ldr	r2, [r2, #12]
 80036fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003702:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6812      	ldr	r2, [r2, #0]
 800370c:	6952      	ldr	r2, [r2, #20]
 800370e:	f022 0201 	bic.w	r2, r2, #1
 8003712:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003718:	2b01      	cmp	r3, #1
 800371a:	d107      	bne.n	800372c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6812      	ldr	r2, [r2, #0]
 8003724:	68d2      	ldr	r2, [r2, #12]
 8003726:	f022 0210 	bic.w	r2, r2, #16
 800372a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	631a      	str	r2, [r3, #48]	; 0x30
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b084      	sub	sp, #16
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003752:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f7ff ff29 	bl	80035b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003766:	bf00      	nop
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800376e:	b480      	push	{r7}
 8003770:	b085      	sub	sp, #20
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b21      	cmp	r3, #33	; 0x21
 8003780:	d13d      	bne.n	80037fe <UART_Transmit_IT+0x90>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800378a:	d113      	bne.n	80037b4 <UART_Transmit_IT+0x46>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d10f      	bne.n	80037b4 <UART_Transmit_IT+0x46>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	8812      	ldrh	r2, [r2, #0]
 80037a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037a6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	1c9a      	adds	r2, r3, #2
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	621a      	str	r2, [r3, #32]
 80037b2:	e008      	b.n	80037c6 <UART_Transmit_IT+0x58>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	1c58      	adds	r0, r3, #1
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	6208      	str	r0, [r1, #32]
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	6053      	str	r3, [r2, #4]
    }

    if (--huart->TxXferCount == 0U)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	3b01      	subs	r3, #1
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	4619      	mov	r1, r3
 80037d4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10f      	bne.n	80037fa <UART_Transmit_IT+0x8c>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6812      	ldr	r2, [r2, #0]
 80037e2:	68d2      	ldr	r2, [r2, #12]
 80037e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	6812      	ldr	r2, [r2, #0]
 80037f2:	68d2      	ldr	r2, [r2, #12]
 80037f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80037fa:	2300      	movs	r3, #0
 80037fc:	e000      	b.n	8003800 <UART_Transmit_IT+0x92>
  }
  else
  {
    return HAL_BUSY;
 80037fe:	2302      	movs	r3, #2
  }
}
 8003800:	4618      	mov	r0, r3
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6812      	ldr	r2, [r2, #0]
 800381c:	68d2      	ldr	r2, [r2, #12]
 800381e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003822:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2220      	movs	r2, #32
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f7ff feb9 	bl	80035a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b22      	cmp	r3, #34	; 0x22
 800384e:	f040 8087 	bne.w	8003960 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800385a:	d117      	bne.n	800388c <UART_Receive_IT+0x50>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d113      	bne.n	800388c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003864:	2300      	movs	r3, #0
 8003866:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386c:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	b29b      	uxth	r3, r3
 8003876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800387a:	b29a      	uxth	r2, r3
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003884:	1c9a      	adds	r2, r3, #2
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	629a      	str	r2, [r3, #40]	; 0x28
 800388a:	e026      	b.n	80038da <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003890:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003892:	2300      	movs	r3, #0
 8003894:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800389e:	d007      	beq.n	80038b0 <UART_Receive_IT+0x74>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10a      	bne.n	80038be <UART_Receive_IT+0x82>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d106      	bne.n	80038be <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	b2da      	uxtb	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	701a      	strb	r2, [r3, #0]
 80038bc:	e008      	b.n	80038d0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d4:	1c5a      	adds	r2, r3, #1
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038de:	b29b      	uxth	r3, r3
 80038e0:	3b01      	subs	r3, #1
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	4619      	mov	r1, r3
 80038e8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d136      	bne.n	800395c <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	6812      	ldr	r2, [r2, #0]
 80038f6:	68d2      	ldr	r2, [r2, #12]
 80038f8:	f022 0220 	bic.w	r2, r2, #32
 80038fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6812      	ldr	r2, [r2, #0]
 8003906:	68d2      	ldr	r2, [r2, #12]
 8003908:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800390c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	6812      	ldr	r2, [r2, #0]
 8003916:	6952      	ldr	r2, [r2, #20]
 8003918:	f022 0201 	bic.w	r2, r2, #1
 800391c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2220      	movs	r2, #32
 8003922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392a:	2b01      	cmp	r3, #1
 800392c:	d10e      	bne.n	800394c <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	6812      	ldr	r2, [r2, #0]
 8003936:	68d2      	ldr	r2, [r2, #12]
 8003938:	f022 0210 	bic.w	r2, r2, #16
 800393c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003942:	4619      	mov	r1, r3
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7ff fe41 	bl	80035cc <HAL_UARTEx_RxEventCallback>
 800394a:	e002      	b.n	8003952 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7fc ffcf 	bl	80008f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8003958:	2300      	movs	r3, #0
 800395a:	e002      	b.n	8003962 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800395c:	2300      	movs	r3, #0
 800395e:	e000      	b.n	8003962 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003960:	2302      	movs	r3, #2
  }
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
	...

0800396c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800396c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003970:	b091      	sub	sp, #68	; 0x44
 8003972:	af00      	add	r7, sp, #0
 8003974:	6378      	str	r0, [r7, #52]	; 0x34
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003978:	6819      	ldr	r1, [r3, #0]
 800397a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	4313      	orrs	r3, r2
 800398a:	610b      	str	r3, [r1, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800398c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	431a      	orrs	r2, r3
 8003996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	431a      	orrs	r2, r3
 800399c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	63bb      	str	r3, [r7, #56]	; 0x38
  MODIFY_REG(huart->Instance->CR1,
 80039a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a6:	6819      	ldr	r1, [r3, #0]
 80039a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 80039b2:	f022 020c 	bic.w	r2, r2, #12
 80039b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b8:	4313      	orrs	r3, r2
 80039ba:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039be:	6819      	ldr	r1, [r3, #0]
 80039c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	614b      	str	r3, [r1, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	4bba      	ldr	r3, [pc, #744]	; (8003cc0 <UART_SetConfig+0x354>)
 80039d8:	429a      	cmp	r2, r3
 80039da:	d004      	beq.n	80039e6 <UART_SetConfig+0x7a>
 80039dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	4bb8      	ldr	r3, [pc, #736]	; (8003cc4 <UART_SetConfig+0x358>)
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d103      	bne.n	80039ee <UART_SetConfig+0x82>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039e6:	f7fe fc9d 	bl	8002324 <HAL_RCC_GetPCLK2Freq>
 80039ea:	63f8      	str	r0, [r7, #60]	; 0x3c
 80039ec:	e002      	b.n	80039f4 <UART_SetConfig+0x88>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039ee:	f7fe fc85 	bl	80022fc <HAL_RCC_GetPCLK1Freq>
 80039f2:	63f8      	str	r0, [r7, #60]	; 0x3c
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039fc:	f040 80a7 	bne.w	8003b4e <UART_SetConfig+0x1e2>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	62ba      	str	r2, [r7, #40]	; 0x28
 8003a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a08:	4619      	mov	r1, r3
 8003a0a:	f04f 0200 	mov.w	r2, #0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4614      	mov	r4, r2
 8003a12:	18db      	adds	r3, r3, r3
 8003a14:	eb44 0404 	adc.w	r4, r4, r4
 8003a18:	185b      	adds	r3, r3, r1
 8003a1a:	eb44 0402 	adc.w	r4, r4, r2
 8003a1e:	00e0      	lsls	r0, r4, #3
 8003a20:	6178      	str	r0, [r7, #20]
 8003a22:	6978      	ldr	r0, [r7, #20]
 8003a24:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003a28:	6178      	str	r0, [r7, #20]
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	613b      	str	r3, [r7, #16]
 8003a2e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003a32:	185d      	adds	r5, r3, r1
 8003a34:	eb44 0602 	adc.w	r6, r4, r2
 8003a38:	4628      	mov	r0, r5
 8003a3a:	4631      	mov	r1, r6
 8003a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f04f 0400 	mov.w	r4, #0
 8003a44:	18db      	adds	r3, r3, r3
 8003a46:	eb44 0404 	adc.w	r4, r4, r4
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	4623      	mov	r3, r4
 8003a4e:	f7fc fc0f 	bl	8000270 <__aeabi_uldivmod>
 8003a52:	4603      	mov	r3, r0
 8003a54:	460c      	mov	r4, r1
 8003a56:	461a      	mov	r2, r3
 8003a58:	4b9b      	ldr	r3, [pc, #620]	; (8003cc8 <UART_SetConfig+0x35c>)
 8003a5a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a5e:	095b      	lsrs	r3, r3, #5
 8003a60:	011e      	lsls	r6, r3, #4
 8003a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a64:	4619      	mov	r1, r3
 8003a66:	f04f 0200 	mov.w	r2, #0
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	4614      	mov	r4, r2
 8003a6e:	18db      	adds	r3, r3, r3
 8003a70:	eb44 0404 	adc.w	r4, r4, r4
 8003a74:	185b      	adds	r3, r3, r1
 8003a76:	eb44 0402 	adc.w	r4, r4, r2
 8003a7a:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 8003a7e:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 8003a82:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 8003a86:	4653      	mov	r3, sl
 8003a88:	465c      	mov	r4, fp
 8003a8a:	eb13 0a01 	adds.w	sl, r3, r1
 8003a8e:	eb44 0b02 	adc.w	fp, r4, r2
 8003a92:	4650      	mov	r0, sl
 8003a94:	4659      	mov	r1, fp
 8003a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f04f 0400 	mov.w	r4, #0
 8003a9e:	18db      	adds	r3, r3, r3
 8003aa0:	eb44 0404 	adc.w	r4, r4, r4
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	4623      	mov	r3, r4
 8003aa8:	f7fc fbe2 	bl	8000270 <__aeabi_uldivmod>
 8003aac:	4603      	mov	r3, r0
 8003aae:	460c      	mov	r4, r1
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	4b85      	ldr	r3, [pc, #532]	; (8003cc8 <UART_SetConfig+0x35c>)
 8003ab4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ab8:	095b      	lsrs	r3, r3, #5
 8003aba:	2164      	movs	r1, #100	; 0x64
 8003abc:	fb01 f303 	mul.w	r3, r1, r3
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	3332      	adds	r3, #50	; 0x32
 8003ac6:	4a80      	ldr	r2, [pc, #512]	; (8003cc8 <UART_SetConfig+0x35c>)
 8003ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8003acc:	095b      	lsrs	r3, r3, #5
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ad4:	441e      	add	r6, r3
 8003ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ad8:	4619      	mov	r1, r3
 8003ada:	f04f 0200 	mov.w	r2, #0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4614      	mov	r4, r2
 8003ae2:	18db      	adds	r3, r3, r3
 8003ae4:	eb44 0404 	adc.w	r4, r4, r4
 8003ae8:	185b      	adds	r3, r3, r1
 8003aea:	eb44 0402 	adc.w	r4, r4, r2
 8003aee:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8003af2:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8003af6:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8003afa:	4643      	mov	r3, r8
 8003afc:	464c      	mov	r4, r9
 8003afe:	eb13 0801 	adds.w	r8, r3, r1
 8003b02:	eb44 0902 	adc.w	r9, r4, r2
 8003b06:	4640      	mov	r0, r8
 8003b08:	4649      	mov	r1, r9
 8003b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f04f 0400 	mov.w	r4, #0
 8003b12:	18db      	adds	r3, r3, r3
 8003b14:	eb44 0404 	adc.w	r4, r4, r4
 8003b18:	461a      	mov	r2, r3
 8003b1a:	4623      	mov	r3, r4
 8003b1c:	f7fc fba8 	bl	8000270 <__aeabi_uldivmod>
 8003b20:	4603      	mov	r3, r0
 8003b22:	460c      	mov	r4, r1
 8003b24:	461a      	mov	r2, r3
 8003b26:	4b68      	ldr	r3, [pc, #416]	; (8003cc8 <UART_SetConfig+0x35c>)
 8003b28:	fba3 1302 	umull	r1, r3, r3, r2
 8003b2c:	095b      	lsrs	r3, r3, #5
 8003b2e:	2164      	movs	r1, #100	; 0x64
 8003b30:	fb01 f303 	mul.w	r3, r1, r3
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	3332      	adds	r3, #50	; 0x32
 8003b3a:	4a63      	ldr	r2, [pc, #396]	; (8003cc8 <UART_SetConfig+0x35c>)
 8003b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b40:	095b      	lsrs	r3, r3, #5
 8003b42:	f003 0307 	and.w	r3, r3, #7
 8003b46:	4433      	add	r3, r6
 8003b48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b4a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b4c:	e0b3      	b.n	8003cb6 <UART_SetConfig+0x34a>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	613b      	str	r3, [r7, #16]
 8003b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b56:	4619      	mov	r1, r3
 8003b58:	f04f 0200 	mov.w	r2, #0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	4614      	mov	r4, r2
 8003b60:	18db      	adds	r3, r3, r3
 8003b62:	eb44 0404 	adc.w	r4, r4, r4
 8003b66:	185b      	adds	r3, r3, r1
 8003b68:	eb44 0402 	adc.w	r4, r4, r2
 8003b6c:	00e6      	lsls	r6, r4, #3
 8003b6e:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 8003b72:	00dd      	lsls	r5, r3, #3
 8003b74:	462b      	mov	r3, r5
 8003b76:	4634      	mov	r4, r6
 8003b78:	185d      	adds	r5, r3, r1
 8003b7a:	eb44 0602 	adc.w	r6, r4, r2
 8003b7e:	4628      	mov	r0, r5
 8003b80:	4631      	mov	r1, r6
 8003b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f04f 0400 	mov.w	r4, #0
 8003b8a:	00a5      	lsls	r5, r4, #2
 8003b8c:	62fd      	str	r5, [r7, #44]	; 0x2c
 8003b8e:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8003b90:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
 8003b94:	62fd      	str	r5, [r7, #44]	; 0x2c
 8003b96:	009c      	lsls	r4, r3, #2
 8003b98:	62bc      	str	r4, [r7, #40]	; 0x28
 8003b9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b9e:	f7fc fb67 	bl	8000270 <__aeabi_uldivmod>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	460c      	mov	r4, r1
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	4b47      	ldr	r3, [pc, #284]	; (8003cc8 <UART_SetConfig+0x35c>)
 8003baa:	fba3 1302 	umull	r1, r3, r3, r2
 8003bae:	095b      	lsrs	r3, r3, #5
 8003bb0:	011d      	lsls	r5, r3, #4
 8003bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	f04f 0200 	mov.w	r2, #0
 8003bba:	460b      	mov	r3, r1
 8003bbc:	4614      	mov	r4, r2
 8003bbe:	18db      	adds	r3, r3, r3
 8003bc0:	eb44 0404 	adc.w	r4, r4, r4
 8003bc4:	185b      	adds	r3, r3, r1
 8003bc6:	eb44 0402 	adc.w	r4, r4, r2
 8003bca:	00e0      	lsls	r0, r4, #3
 8003bcc:	60f8      	str	r0, [r7, #12]
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003bd4:	60f8      	str	r0, [r7, #12]
 8003bd6:	00d8      	lsls	r0, r3, #3
 8003bd8:	60b8      	str	r0, [r7, #8]
 8003bda:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003bde:	eb13 0801 	adds.w	r8, r3, r1
 8003be2:	eb44 0902 	adc.w	r9, r4, r2
 8003be6:	4640      	mov	r0, r8
 8003be8:	4649      	mov	r1, r9
 8003bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f04f 0400 	mov.w	r4, #0
 8003bf2:	00a6      	lsls	r6, r4, #2
 8003bf4:	627e      	str	r6, [r7, #36]	; 0x24
 8003bf6:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8003bf8:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8003bfc:	627e      	str	r6, [r7, #36]	; 0x24
 8003bfe:	009c      	lsls	r4, r3, #2
 8003c00:	623c      	str	r4, [r7, #32]
 8003c02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c06:	f7fc fb33 	bl	8000270 <__aeabi_uldivmod>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	460c      	mov	r4, r1
 8003c0e:	461a      	mov	r2, r3
 8003c10:	4b2d      	ldr	r3, [pc, #180]	; (8003cc8 <UART_SetConfig+0x35c>)
 8003c12:	fba3 1302 	umull	r1, r3, r3, r2
 8003c16:	095b      	lsrs	r3, r3, #5
 8003c18:	2164      	movs	r1, #100	; 0x64
 8003c1a:	fb01 f303 	mul.w	r3, r1, r3
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	011b      	lsls	r3, r3, #4
 8003c22:	3332      	adds	r3, #50	; 0x32
 8003c24:	4a28      	ldr	r2, [pc, #160]	; (8003cc8 <UART_SetConfig+0x35c>)
 8003c26:	fba2 1303 	umull	r1, r3, r2, r3
 8003c2a:	095b      	lsrs	r3, r3, #5
 8003c2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c30:	441d      	add	r5, r3
 8003c32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c34:	4619      	mov	r1, r3
 8003c36:	f04f 0200 	mov.w	r2, #0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4614      	mov	r4, r2
 8003c3e:	18db      	adds	r3, r3, r3
 8003c40:	eb44 0404 	adc.w	r4, r4, r4
 8003c44:	185b      	adds	r3, r3, r1
 8003c46:	eb44 0402 	adc.w	r4, r4, r2
 8003c4a:	00e0      	lsls	r0, r4, #3
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003c54:	6078      	str	r0, [r7, #4]
 8003c56:	00d8      	lsls	r0, r3, #3
 8003c58:	6038      	str	r0, [r7, #0]
 8003c5a:	e897 0018 	ldmia.w	r7, {r3, r4}
 8003c5e:	eb13 0801 	adds.w	r8, r3, r1
 8003c62:	eb44 0902 	adc.w	r9, r4, r2
 8003c66:	4640      	mov	r0, r8
 8003c68:	4649      	mov	r1, r9
 8003c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f04f 0400 	mov.w	r4, #0
 8003c72:	00a6      	lsls	r6, r4, #2
 8003c74:	61fe      	str	r6, [r7, #28]
 8003c76:	69fe      	ldr	r6, [r7, #28]
 8003c78:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8003c7c:	61fe      	str	r6, [r7, #28]
 8003c7e:	009c      	lsls	r4, r3, #2
 8003c80:	61bc      	str	r4, [r7, #24]
 8003c82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c86:	f7fc faf3 	bl	8000270 <__aeabi_uldivmod>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	460c      	mov	r4, r1
 8003c8e:	461a      	mov	r2, r3
 8003c90:	4b0d      	ldr	r3, [pc, #52]	; (8003cc8 <UART_SetConfig+0x35c>)
 8003c92:	fba3 1302 	umull	r1, r3, r3, r2
 8003c96:	095b      	lsrs	r3, r3, #5
 8003c98:	2164      	movs	r1, #100	; 0x64
 8003c9a:	fb01 f303 	mul.w	r3, r1, r3
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	3332      	adds	r3, #50	; 0x32
 8003ca4:	4a08      	ldr	r2, [pc, #32]	; (8003cc8 <UART_SetConfig+0x35c>)
 8003ca6:	fba2 1303 	umull	r1, r3, r2, r3
 8003caa:	095b      	lsrs	r3, r3, #5
 8003cac:	f003 030f 	and.w	r3, r3, #15
 8003cb0:	442b      	add	r3, r5
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	6093      	str	r3, [r2, #8]
}
 8003cb6:	bf00      	nop
 8003cb8:	3744      	adds	r7, #68	; 0x44
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cc0:	40011000 	.word	0x40011000
 8003cc4:	40011400 	.word	0x40011400
 8003cc8:	51eb851f 	.word	0x51eb851f

08003ccc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003ccc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003cd0:	480d      	ldr	r0, [pc, #52]	; (8003d08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003cd2:	490e      	ldr	r1, [pc, #56]	; (8003d0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003cd4:	4a0e      	ldr	r2, [pc, #56]	; (8003d10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003cd8:	e002      	b.n	8003ce0 <LoopCopyDataInit>

08003cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cde:	3304      	adds	r3, #4

08003ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ce4:	d3f9      	bcc.n	8003cda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ce6:	4a0b      	ldr	r2, [pc, #44]	; (8003d14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003ce8:	4c0b      	ldr	r4, [pc, #44]	; (8003d18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003cec:	e001      	b.n	8003cf2 <LoopFillZerobss>

08003cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003cf0:	3204      	adds	r2, #4

08003cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003cf4:	d3fb      	bcc.n	8003cee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003cf6:	f7fc ff1f 	bl	8000b38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003cfa:	f000 f817 	bl	8003d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003cfe:	f7fc fd55 	bl	80007ac <main>
  bx  lr    
 8003d02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003d04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d0c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003d10:	08004c54 	.word	0x08004c54
  ldr r2, =_sbss
 8003d14:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003d18:	20000178 	.word	0x20000178

08003d1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d1c:	e7fe      	b.n	8003d1c <ADC_IRQHandler>
	...

08003d20 <__errno>:
 8003d20:	4b01      	ldr	r3, [pc, #4]	; (8003d28 <__errno+0x8>)
 8003d22:	6818      	ldr	r0, [r3, #0]
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	2000000c 	.word	0x2000000c

08003d2c <__libc_init_array>:
 8003d2c:	b570      	push	{r4, r5, r6, lr}
 8003d2e:	4e0d      	ldr	r6, [pc, #52]	; (8003d64 <__libc_init_array+0x38>)
 8003d30:	4c0d      	ldr	r4, [pc, #52]	; (8003d68 <__libc_init_array+0x3c>)
 8003d32:	1ba4      	subs	r4, r4, r6
 8003d34:	10a4      	asrs	r4, r4, #2
 8003d36:	2500      	movs	r5, #0
 8003d38:	42a5      	cmp	r5, r4
 8003d3a:	d109      	bne.n	8003d50 <__libc_init_array+0x24>
 8003d3c:	4e0b      	ldr	r6, [pc, #44]	; (8003d6c <__libc_init_array+0x40>)
 8003d3e:	4c0c      	ldr	r4, [pc, #48]	; (8003d70 <__libc_init_array+0x44>)
 8003d40:	f000 ff18 	bl	8004b74 <_init>
 8003d44:	1ba4      	subs	r4, r4, r6
 8003d46:	10a4      	asrs	r4, r4, #2
 8003d48:	2500      	movs	r5, #0
 8003d4a:	42a5      	cmp	r5, r4
 8003d4c:	d105      	bne.n	8003d5a <__libc_init_array+0x2e>
 8003d4e:	bd70      	pop	{r4, r5, r6, pc}
 8003d50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d54:	4798      	blx	r3
 8003d56:	3501      	adds	r5, #1
 8003d58:	e7ee      	b.n	8003d38 <__libc_init_array+0xc>
 8003d5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d5e:	4798      	blx	r3
 8003d60:	3501      	adds	r5, #1
 8003d62:	e7f2      	b.n	8003d4a <__libc_init_array+0x1e>
 8003d64:	08004c4c 	.word	0x08004c4c
 8003d68:	08004c4c 	.word	0x08004c4c
 8003d6c:	08004c4c 	.word	0x08004c4c
 8003d70:	08004c50 	.word	0x08004c50

08003d74 <memset>:
 8003d74:	4402      	add	r2, r0
 8003d76:	4603      	mov	r3, r0
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d100      	bne.n	8003d7e <memset+0xa>
 8003d7c:	4770      	bx	lr
 8003d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d82:	e7f9      	b.n	8003d78 <memset+0x4>

08003d84 <iprintf>:
 8003d84:	b40f      	push	{r0, r1, r2, r3}
 8003d86:	4b0a      	ldr	r3, [pc, #40]	; (8003db0 <iprintf+0x2c>)
 8003d88:	b513      	push	{r0, r1, r4, lr}
 8003d8a:	681c      	ldr	r4, [r3, #0]
 8003d8c:	b124      	cbz	r4, 8003d98 <iprintf+0x14>
 8003d8e:	69a3      	ldr	r3, [r4, #24]
 8003d90:	b913      	cbnz	r3, 8003d98 <iprintf+0x14>
 8003d92:	4620      	mov	r0, r4
 8003d94:	f000 f84e 	bl	8003e34 <__sinit>
 8003d98:	ab05      	add	r3, sp, #20
 8003d9a:	9a04      	ldr	r2, [sp, #16]
 8003d9c:	68a1      	ldr	r1, [r4, #8]
 8003d9e:	9301      	str	r3, [sp, #4]
 8003da0:	4620      	mov	r0, r4
 8003da2:	f000 f959 	bl	8004058 <_vfiprintf_r>
 8003da6:	b002      	add	sp, #8
 8003da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dac:	b004      	add	sp, #16
 8003dae:	4770      	bx	lr
 8003db0:	2000000c 	.word	0x2000000c

08003db4 <_cleanup_r>:
 8003db4:	4901      	ldr	r1, [pc, #4]	; (8003dbc <_cleanup_r+0x8>)
 8003db6:	f000 b8a9 	b.w	8003f0c <_fwalk_reent>
 8003dba:	bf00      	nop
 8003dbc:	0800492d 	.word	0x0800492d

08003dc0 <std.isra.0>:
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	b510      	push	{r4, lr}
 8003dc4:	4604      	mov	r4, r0
 8003dc6:	6003      	str	r3, [r0, #0]
 8003dc8:	6043      	str	r3, [r0, #4]
 8003dca:	6083      	str	r3, [r0, #8]
 8003dcc:	8181      	strh	r1, [r0, #12]
 8003dce:	6643      	str	r3, [r0, #100]	; 0x64
 8003dd0:	81c2      	strh	r2, [r0, #14]
 8003dd2:	6103      	str	r3, [r0, #16]
 8003dd4:	6143      	str	r3, [r0, #20]
 8003dd6:	6183      	str	r3, [r0, #24]
 8003dd8:	4619      	mov	r1, r3
 8003dda:	2208      	movs	r2, #8
 8003ddc:	305c      	adds	r0, #92	; 0x5c
 8003dde:	f7ff ffc9 	bl	8003d74 <memset>
 8003de2:	4b05      	ldr	r3, [pc, #20]	; (8003df8 <std.isra.0+0x38>)
 8003de4:	6263      	str	r3, [r4, #36]	; 0x24
 8003de6:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <std.isra.0+0x3c>)
 8003de8:	62a3      	str	r3, [r4, #40]	; 0x28
 8003dea:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <std.isra.0+0x40>)
 8003dec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003dee:	4b05      	ldr	r3, [pc, #20]	; (8003e04 <std.isra.0+0x44>)
 8003df0:	6224      	str	r4, [r4, #32]
 8003df2:	6323      	str	r3, [r4, #48]	; 0x30
 8003df4:	bd10      	pop	{r4, pc}
 8003df6:	bf00      	nop
 8003df8:	080045d1 	.word	0x080045d1
 8003dfc:	080045f3 	.word	0x080045f3
 8003e00:	0800462b 	.word	0x0800462b
 8003e04:	0800464f 	.word	0x0800464f

08003e08 <__sfmoreglue>:
 8003e08:	b570      	push	{r4, r5, r6, lr}
 8003e0a:	1e4a      	subs	r2, r1, #1
 8003e0c:	2568      	movs	r5, #104	; 0x68
 8003e0e:	4355      	muls	r5, r2
 8003e10:	460e      	mov	r6, r1
 8003e12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003e16:	f000 f897 	bl	8003f48 <_malloc_r>
 8003e1a:	4604      	mov	r4, r0
 8003e1c:	b140      	cbz	r0, 8003e30 <__sfmoreglue+0x28>
 8003e1e:	2100      	movs	r1, #0
 8003e20:	e880 0042 	stmia.w	r0, {r1, r6}
 8003e24:	300c      	adds	r0, #12
 8003e26:	60a0      	str	r0, [r4, #8]
 8003e28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003e2c:	f7ff ffa2 	bl	8003d74 <memset>
 8003e30:	4620      	mov	r0, r4
 8003e32:	bd70      	pop	{r4, r5, r6, pc}

08003e34 <__sinit>:
 8003e34:	6983      	ldr	r3, [r0, #24]
 8003e36:	b510      	push	{r4, lr}
 8003e38:	4604      	mov	r4, r0
 8003e3a:	bb33      	cbnz	r3, 8003e8a <__sinit+0x56>
 8003e3c:	6483      	str	r3, [r0, #72]	; 0x48
 8003e3e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003e40:	6503      	str	r3, [r0, #80]	; 0x50
 8003e42:	4b12      	ldr	r3, [pc, #72]	; (8003e8c <__sinit+0x58>)
 8003e44:	4a12      	ldr	r2, [pc, #72]	; (8003e90 <__sinit+0x5c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6282      	str	r2, [r0, #40]	; 0x28
 8003e4a:	4298      	cmp	r0, r3
 8003e4c:	bf04      	itt	eq
 8003e4e:	2301      	moveq	r3, #1
 8003e50:	6183      	streq	r3, [r0, #24]
 8003e52:	f000 f81f 	bl	8003e94 <__sfp>
 8003e56:	6060      	str	r0, [r4, #4]
 8003e58:	4620      	mov	r0, r4
 8003e5a:	f000 f81b 	bl	8003e94 <__sfp>
 8003e5e:	60a0      	str	r0, [r4, #8]
 8003e60:	4620      	mov	r0, r4
 8003e62:	f000 f817 	bl	8003e94 <__sfp>
 8003e66:	2200      	movs	r2, #0
 8003e68:	60e0      	str	r0, [r4, #12]
 8003e6a:	2104      	movs	r1, #4
 8003e6c:	6860      	ldr	r0, [r4, #4]
 8003e6e:	f7ff ffa7 	bl	8003dc0 <std.isra.0>
 8003e72:	2201      	movs	r2, #1
 8003e74:	2109      	movs	r1, #9
 8003e76:	68a0      	ldr	r0, [r4, #8]
 8003e78:	f7ff ffa2 	bl	8003dc0 <std.isra.0>
 8003e7c:	2202      	movs	r2, #2
 8003e7e:	2112      	movs	r1, #18
 8003e80:	68e0      	ldr	r0, [r4, #12]
 8003e82:	f7ff ff9d 	bl	8003dc0 <std.isra.0>
 8003e86:	2301      	movs	r3, #1
 8003e88:	61a3      	str	r3, [r4, #24]
 8003e8a:	bd10      	pop	{r4, pc}
 8003e8c:	08004bac 	.word	0x08004bac
 8003e90:	08003db5 	.word	0x08003db5

08003e94 <__sfp>:
 8003e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e96:	4b1c      	ldr	r3, [pc, #112]	; (8003f08 <__sfp+0x74>)
 8003e98:	681e      	ldr	r6, [r3, #0]
 8003e9a:	69b3      	ldr	r3, [r6, #24]
 8003e9c:	4607      	mov	r7, r0
 8003e9e:	b913      	cbnz	r3, 8003ea6 <__sfp+0x12>
 8003ea0:	4630      	mov	r0, r6
 8003ea2:	f7ff ffc7 	bl	8003e34 <__sinit>
 8003ea6:	3648      	adds	r6, #72	; 0x48
 8003ea8:	68b4      	ldr	r4, [r6, #8]
 8003eaa:	6873      	ldr	r3, [r6, #4]
 8003eac:	3b01      	subs	r3, #1
 8003eae:	d503      	bpl.n	8003eb8 <__sfp+0x24>
 8003eb0:	6833      	ldr	r3, [r6, #0]
 8003eb2:	b133      	cbz	r3, 8003ec2 <__sfp+0x2e>
 8003eb4:	6836      	ldr	r6, [r6, #0]
 8003eb6:	e7f7      	b.n	8003ea8 <__sfp+0x14>
 8003eb8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003ebc:	b16d      	cbz	r5, 8003eda <__sfp+0x46>
 8003ebe:	3468      	adds	r4, #104	; 0x68
 8003ec0:	e7f4      	b.n	8003eac <__sfp+0x18>
 8003ec2:	2104      	movs	r1, #4
 8003ec4:	4638      	mov	r0, r7
 8003ec6:	f7ff ff9f 	bl	8003e08 <__sfmoreglue>
 8003eca:	6030      	str	r0, [r6, #0]
 8003ecc:	2800      	cmp	r0, #0
 8003ece:	d1f1      	bne.n	8003eb4 <__sfp+0x20>
 8003ed0:	230c      	movs	r3, #12
 8003ed2:	603b      	str	r3, [r7, #0]
 8003ed4:	4604      	mov	r4, r0
 8003ed6:	4620      	mov	r0, r4
 8003ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003eda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ede:	81e3      	strh	r3, [r4, #14]
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	81a3      	strh	r3, [r4, #12]
 8003ee4:	6665      	str	r5, [r4, #100]	; 0x64
 8003ee6:	6025      	str	r5, [r4, #0]
 8003ee8:	60a5      	str	r5, [r4, #8]
 8003eea:	6065      	str	r5, [r4, #4]
 8003eec:	6125      	str	r5, [r4, #16]
 8003eee:	6165      	str	r5, [r4, #20]
 8003ef0:	61a5      	str	r5, [r4, #24]
 8003ef2:	2208      	movs	r2, #8
 8003ef4:	4629      	mov	r1, r5
 8003ef6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003efa:	f7ff ff3b 	bl	8003d74 <memset>
 8003efe:	6365      	str	r5, [r4, #52]	; 0x34
 8003f00:	63a5      	str	r5, [r4, #56]	; 0x38
 8003f02:	64a5      	str	r5, [r4, #72]	; 0x48
 8003f04:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003f06:	e7e6      	b.n	8003ed6 <__sfp+0x42>
 8003f08:	08004bac 	.word	0x08004bac

08003f0c <_fwalk_reent>:
 8003f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f10:	4680      	mov	r8, r0
 8003f12:	4689      	mov	r9, r1
 8003f14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003f18:	2600      	movs	r6, #0
 8003f1a:	b914      	cbnz	r4, 8003f22 <_fwalk_reent+0x16>
 8003f1c:	4630      	mov	r0, r6
 8003f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f22:	68a5      	ldr	r5, [r4, #8]
 8003f24:	6867      	ldr	r7, [r4, #4]
 8003f26:	3f01      	subs	r7, #1
 8003f28:	d501      	bpl.n	8003f2e <_fwalk_reent+0x22>
 8003f2a:	6824      	ldr	r4, [r4, #0]
 8003f2c:	e7f5      	b.n	8003f1a <_fwalk_reent+0xe>
 8003f2e:	89ab      	ldrh	r3, [r5, #12]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d907      	bls.n	8003f44 <_fwalk_reent+0x38>
 8003f34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	d003      	beq.n	8003f44 <_fwalk_reent+0x38>
 8003f3c:	4629      	mov	r1, r5
 8003f3e:	4640      	mov	r0, r8
 8003f40:	47c8      	blx	r9
 8003f42:	4306      	orrs	r6, r0
 8003f44:	3568      	adds	r5, #104	; 0x68
 8003f46:	e7ee      	b.n	8003f26 <_fwalk_reent+0x1a>

08003f48 <_malloc_r>:
 8003f48:	b570      	push	{r4, r5, r6, lr}
 8003f4a:	1ccd      	adds	r5, r1, #3
 8003f4c:	f025 0503 	bic.w	r5, r5, #3
 8003f50:	3508      	adds	r5, #8
 8003f52:	2d0c      	cmp	r5, #12
 8003f54:	bf38      	it	cc
 8003f56:	250c      	movcc	r5, #12
 8003f58:	2d00      	cmp	r5, #0
 8003f5a:	4606      	mov	r6, r0
 8003f5c:	db01      	blt.n	8003f62 <_malloc_r+0x1a>
 8003f5e:	42a9      	cmp	r1, r5
 8003f60:	d903      	bls.n	8003f6a <_malloc_r+0x22>
 8003f62:	230c      	movs	r3, #12
 8003f64:	6033      	str	r3, [r6, #0]
 8003f66:	2000      	movs	r0, #0
 8003f68:	bd70      	pop	{r4, r5, r6, pc}
 8003f6a:	f000 fd7f 	bl	8004a6c <__malloc_lock>
 8003f6e:	4a23      	ldr	r2, [pc, #140]	; (8003ffc <_malloc_r+0xb4>)
 8003f70:	6814      	ldr	r4, [r2, #0]
 8003f72:	4621      	mov	r1, r4
 8003f74:	b991      	cbnz	r1, 8003f9c <_malloc_r+0x54>
 8003f76:	4c22      	ldr	r4, [pc, #136]	; (8004000 <_malloc_r+0xb8>)
 8003f78:	6823      	ldr	r3, [r4, #0]
 8003f7a:	b91b      	cbnz	r3, 8003f84 <_malloc_r+0x3c>
 8003f7c:	4630      	mov	r0, r6
 8003f7e:	f000 fb17 	bl	80045b0 <_sbrk_r>
 8003f82:	6020      	str	r0, [r4, #0]
 8003f84:	4629      	mov	r1, r5
 8003f86:	4630      	mov	r0, r6
 8003f88:	f000 fb12 	bl	80045b0 <_sbrk_r>
 8003f8c:	1c43      	adds	r3, r0, #1
 8003f8e:	d126      	bne.n	8003fde <_malloc_r+0x96>
 8003f90:	230c      	movs	r3, #12
 8003f92:	6033      	str	r3, [r6, #0]
 8003f94:	4630      	mov	r0, r6
 8003f96:	f000 fd6a 	bl	8004a6e <__malloc_unlock>
 8003f9a:	e7e4      	b.n	8003f66 <_malloc_r+0x1e>
 8003f9c:	680b      	ldr	r3, [r1, #0]
 8003f9e:	1b5b      	subs	r3, r3, r5
 8003fa0:	d41a      	bmi.n	8003fd8 <_malloc_r+0x90>
 8003fa2:	2b0b      	cmp	r3, #11
 8003fa4:	d90f      	bls.n	8003fc6 <_malloc_r+0x7e>
 8003fa6:	600b      	str	r3, [r1, #0]
 8003fa8:	50cd      	str	r5, [r1, r3]
 8003faa:	18cc      	adds	r4, r1, r3
 8003fac:	4630      	mov	r0, r6
 8003fae:	f000 fd5e 	bl	8004a6e <__malloc_unlock>
 8003fb2:	f104 000b 	add.w	r0, r4, #11
 8003fb6:	1d23      	adds	r3, r4, #4
 8003fb8:	f020 0007 	bic.w	r0, r0, #7
 8003fbc:	1ac3      	subs	r3, r0, r3
 8003fbe:	d01b      	beq.n	8003ff8 <_malloc_r+0xb0>
 8003fc0:	425a      	negs	r2, r3
 8003fc2:	50e2      	str	r2, [r4, r3]
 8003fc4:	bd70      	pop	{r4, r5, r6, pc}
 8003fc6:	428c      	cmp	r4, r1
 8003fc8:	bf0d      	iteet	eq
 8003fca:	6863      	ldreq	r3, [r4, #4]
 8003fcc:	684b      	ldrne	r3, [r1, #4]
 8003fce:	6063      	strne	r3, [r4, #4]
 8003fd0:	6013      	streq	r3, [r2, #0]
 8003fd2:	bf18      	it	ne
 8003fd4:	460c      	movne	r4, r1
 8003fd6:	e7e9      	b.n	8003fac <_malloc_r+0x64>
 8003fd8:	460c      	mov	r4, r1
 8003fda:	6849      	ldr	r1, [r1, #4]
 8003fdc:	e7ca      	b.n	8003f74 <_malloc_r+0x2c>
 8003fde:	1cc4      	adds	r4, r0, #3
 8003fe0:	f024 0403 	bic.w	r4, r4, #3
 8003fe4:	42a0      	cmp	r0, r4
 8003fe6:	d005      	beq.n	8003ff4 <_malloc_r+0xac>
 8003fe8:	1a21      	subs	r1, r4, r0
 8003fea:	4630      	mov	r0, r6
 8003fec:	f000 fae0 	bl	80045b0 <_sbrk_r>
 8003ff0:	3001      	adds	r0, #1
 8003ff2:	d0cd      	beq.n	8003f90 <_malloc_r+0x48>
 8003ff4:	6025      	str	r5, [r4, #0]
 8003ff6:	e7d9      	b.n	8003fac <_malloc_r+0x64>
 8003ff8:	bd70      	pop	{r4, r5, r6, pc}
 8003ffa:	bf00      	nop
 8003ffc:	20000090 	.word	0x20000090
 8004000:	20000094 	.word	0x20000094

08004004 <__sfputc_r>:
 8004004:	6893      	ldr	r3, [r2, #8]
 8004006:	3b01      	subs	r3, #1
 8004008:	2b00      	cmp	r3, #0
 800400a:	b410      	push	{r4}
 800400c:	6093      	str	r3, [r2, #8]
 800400e:	da09      	bge.n	8004024 <__sfputc_r+0x20>
 8004010:	6994      	ldr	r4, [r2, #24]
 8004012:	42a3      	cmp	r3, r4
 8004014:	db02      	blt.n	800401c <__sfputc_r+0x18>
 8004016:	b2cb      	uxtb	r3, r1
 8004018:	2b0a      	cmp	r3, #10
 800401a:	d103      	bne.n	8004024 <__sfputc_r+0x20>
 800401c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004020:	f000 bb1a 	b.w	8004658 <__swbuf_r>
 8004024:	6813      	ldr	r3, [r2, #0]
 8004026:	1c58      	adds	r0, r3, #1
 8004028:	6010      	str	r0, [r2, #0]
 800402a:	7019      	strb	r1, [r3, #0]
 800402c:	b2c8      	uxtb	r0, r1
 800402e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004032:	4770      	bx	lr

08004034 <__sfputs_r>:
 8004034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004036:	4606      	mov	r6, r0
 8004038:	460f      	mov	r7, r1
 800403a:	4614      	mov	r4, r2
 800403c:	18d5      	adds	r5, r2, r3
 800403e:	42ac      	cmp	r4, r5
 8004040:	d101      	bne.n	8004046 <__sfputs_r+0x12>
 8004042:	2000      	movs	r0, #0
 8004044:	e007      	b.n	8004056 <__sfputs_r+0x22>
 8004046:	463a      	mov	r2, r7
 8004048:	f814 1b01 	ldrb.w	r1, [r4], #1
 800404c:	4630      	mov	r0, r6
 800404e:	f7ff ffd9 	bl	8004004 <__sfputc_r>
 8004052:	1c43      	adds	r3, r0, #1
 8004054:	d1f3      	bne.n	800403e <__sfputs_r+0xa>
 8004056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004058 <_vfiprintf_r>:
 8004058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800405c:	b09d      	sub	sp, #116	; 0x74
 800405e:	460c      	mov	r4, r1
 8004060:	4617      	mov	r7, r2
 8004062:	9303      	str	r3, [sp, #12]
 8004064:	4606      	mov	r6, r0
 8004066:	b118      	cbz	r0, 8004070 <_vfiprintf_r+0x18>
 8004068:	6983      	ldr	r3, [r0, #24]
 800406a:	b90b      	cbnz	r3, 8004070 <_vfiprintf_r+0x18>
 800406c:	f7ff fee2 	bl	8003e34 <__sinit>
 8004070:	4b7c      	ldr	r3, [pc, #496]	; (8004264 <_vfiprintf_r+0x20c>)
 8004072:	429c      	cmp	r4, r3
 8004074:	d157      	bne.n	8004126 <_vfiprintf_r+0xce>
 8004076:	6874      	ldr	r4, [r6, #4]
 8004078:	89a3      	ldrh	r3, [r4, #12]
 800407a:	0718      	lsls	r0, r3, #28
 800407c:	d55d      	bpl.n	800413a <_vfiprintf_r+0xe2>
 800407e:	6923      	ldr	r3, [r4, #16]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d05a      	beq.n	800413a <_vfiprintf_r+0xe2>
 8004084:	2300      	movs	r3, #0
 8004086:	9309      	str	r3, [sp, #36]	; 0x24
 8004088:	2320      	movs	r3, #32
 800408a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800408e:	2330      	movs	r3, #48	; 0x30
 8004090:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004094:	f04f 0b01 	mov.w	fp, #1
 8004098:	46b8      	mov	r8, r7
 800409a:	4645      	mov	r5, r8
 800409c:	f815 3b01 	ldrb.w	r3, [r5], #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d155      	bne.n	8004150 <_vfiprintf_r+0xf8>
 80040a4:	ebb8 0a07 	subs.w	sl, r8, r7
 80040a8:	d00b      	beq.n	80040c2 <_vfiprintf_r+0x6a>
 80040aa:	4653      	mov	r3, sl
 80040ac:	463a      	mov	r2, r7
 80040ae:	4621      	mov	r1, r4
 80040b0:	4630      	mov	r0, r6
 80040b2:	f7ff ffbf 	bl	8004034 <__sfputs_r>
 80040b6:	3001      	adds	r0, #1
 80040b8:	f000 80c4 	beq.w	8004244 <_vfiprintf_r+0x1ec>
 80040bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040be:	4453      	add	r3, sl
 80040c0:	9309      	str	r3, [sp, #36]	; 0x24
 80040c2:	f898 3000 	ldrb.w	r3, [r8]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 80bc 	beq.w	8004244 <_vfiprintf_r+0x1ec>
 80040cc:	2300      	movs	r3, #0
 80040ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040d2:	9304      	str	r3, [sp, #16]
 80040d4:	9307      	str	r3, [sp, #28]
 80040d6:	9205      	str	r2, [sp, #20]
 80040d8:	9306      	str	r3, [sp, #24]
 80040da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040de:	931a      	str	r3, [sp, #104]	; 0x68
 80040e0:	2205      	movs	r2, #5
 80040e2:	7829      	ldrb	r1, [r5, #0]
 80040e4:	4860      	ldr	r0, [pc, #384]	; (8004268 <_vfiprintf_r+0x210>)
 80040e6:	f7fc f873 	bl	80001d0 <memchr>
 80040ea:	f105 0801 	add.w	r8, r5, #1
 80040ee:	9b04      	ldr	r3, [sp, #16]
 80040f0:	2800      	cmp	r0, #0
 80040f2:	d131      	bne.n	8004158 <_vfiprintf_r+0x100>
 80040f4:	06d9      	lsls	r1, r3, #27
 80040f6:	bf44      	itt	mi
 80040f8:	2220      	movmi	r2, #32
 80040fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80040fe:	071a      	lsls	r2, r3, #28
 8004100:	bf44      	itt	mi
 8004102:	222b      	movmi	r2, #43	; 0x2b
 8004104:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004108:	782a      	ldrb	r2, [r5, #0]
 800410a:	2a2a      	cmp	r2, #42	; 0x2a
 800410c:	d02c      	beq.n	8004168 <_vfiprintf_r+0x110>
 800410e:	9a07      	ldr	r2, [sp, #28]
 8004110:	2100      	movs	r1, #0
 8004112:	200a      	movs	r0, #10
 8004114:	46a8      	mov	r8, r5
 8004116:	3501      	adds	r5, #1
 8004118:	f898 3000 	ldrb.w	r3, [r8]
 800411c:	3b30      	subs	r3, #48	; 0x30
 800411e:	2b09      	cmp	r3, #9
 8004120:	d96d      	bls.n	80041fe <_vfiprintf_r+0x1a6>
 8004122:	b371      	cbz	r1, 8004182 <_vfiprintf_r+0x12a>
 8004124:	e026      	b.n	8004174 <_vfiprintf_r+0x11c>
 8004126:	4b51      	ldr	r3, [pc, #324]	; (800426c <_vfiprintf_r+0x214>)
 8004128:	429c      	cmp	r4, r3
 800412a:	d101      	bne.n	8004130 <_vfiprintf_r+0xd8>
 800412c:	68b4      	ldr	r4, [r6, #8]
 800412e:	e7a3      	b.n	8004078 <_vfiprintf_r+0x20>
 8004130:	4b4f      	ldr	r3, [pc, #316]	; (8004270 <_vfiprintf_r+0x218>)
 8004132:	429c      	cmp	r4, r3
 8004134:	bf08      	it	eq
 8004136:	68f4      	ldreq	r4, [r6, #12]
 8004138:	e79e      	b.n	8004078 <_vfiprintf_r+0x20>
 800413a:	4621      	mov	r1, r4
 800413c:	4630      	mov	r0, r6
 800413e:	f000 faef 	bl	8004720 <__swsetup_r>
 8004142:	2800      	cmp	r0, #0
 8004144:	d09e      	beq.n	8004084 <_vfiprintf_r+0x2c>
 8004146:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800414a:	b01d      	add	sp, #116	; 0x74
 800414c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004150:	2b25      	cmp	r3, #37	; 0x25
 8004152:	d0a7      	beq.n	80040a4 <_vfiprintf_r+0x4c>
 8004154:	46a8      	mov	r8, r5
 8004156:	e7a0      	b.n	800409a <_vfiprintf_r+0x42>
 8004158:	4a43      	ldr	r2, [pc, #268]	; (8004268 <_vfiprintf_r+0x210>)
 800415a:	1a80      	subs	r0, r0, r2
 800415c:	fa0b f000 	lsl.w	r0, fp, r0
 8004160:	4318      	orrs	r0, r3
 8004162:	9004      	str	r0, [sp, #16]
 8004164:	4645      	mov	r5, r8
 8004166:	e7bb      	b.n	80040e0 <_vfiprintf_r+0x88>
 8004168:	9a03      	ldr	r2, [sp, #12]
 800416a:	1d11      	adds	r1, r2, #4
 800416c:	6812      	ldr	r2, [r2, #0]
 800416e:	9103      	str	r1, [sp, #12]
 8004170:	2a00      	cmp	r2, #0
 8004172:	db01      	blt.n	8004178 <_vfiprintf_r+0x120>
 8004174:	9207      	str	r2, [sp, #28]
 8004176:	e004      	b.n	8004182 <_vfiprintf_r+0x12a>
 8004178:	4252      	negs	r2, r2
 800417a:	f043 0302 	orr.w	r3, r3, #2
 800417e:	9207      	str	r2, [sp, #28]
 8004180:	9304      	str	r3, [sp, #16]
 8004182:	f898 3000 	ldrb.w	r3, [r8]
 8004186:	2b2e      	cmp	r3, #46	; 0x2e
 8004188:	d110      	bne.n	80041ac <_vfiprintf_r+0x154>
 800418a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800418e:	2b2a      	cmp	r3, #42	; 0x2a
 8004190:	f108 0101 	add.w	r1, r8, #1
 8004194:	d137      	bne.n	8004206 <_vfiprintf_r+0x1ae>
 8004196:	9b03      	ldr	r3, [sp, #12]
 8004198:	1d1a      	adds	r2, r3, #4
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	9203      	str	r2, [sp, #12]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	bfb8      	it	lt
 80041a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80041a6:	f108 0802 	add.w	r8, r8, #2
 80041aa:	9305      	str	r3, [sp, #20]
 80041ac:	4d31      	ldr	r5, [pc, #196]	; (8004274 <_vfiprintf_r+0x21c>)
 80041ae:	f898 1000 	ldrb.w	r1, [r8]
 80041b2:	2203      	movs	r2, #3
 80041b4:	4628      	mov	r0, r5
 80041b6:	f7fc f80b 	bl	80001d0 <memchr>
 80041ba:	b140      	cbz	r0, 80041ce <_vfiprintf_r+0x176>
 80041bc:	2340      	movs	r3, #64	; 0x40
 80041be:	1b40      	subs	r0, r0, r5
 80041c0:	fa03 f000 	lsl.w	r0, r3, r0
 80041c4:	9b04      	ldr	r3, [sp, #16]
 80041c6:	4303      	orrs	r3, r0
 80041c8:	9304      	str	r3, [sp, #16]
 80041ca:	f108 0801 	add.w	r8, r8, #1
 80041ce:	f898 1000 	ldrb.w	r1, [r8]
 80041d2:	4829      	ldr	r0, [pc, #164]	; (8004278 <_vfiprintf_r+0x220>)
 80041d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80041d8:	2206      	movs	r2, #6
 80041da:	f108 0701 	add.w	r7, r8, #1
 80041de:	f7fb fff7 	bl	80001d0 <memchr>
 80041e2:	2800      	cmp	r0, #0
 80041e4:	d034      	beq.n	8004250 <_vfiprintf_r+0x1f8>
 80041e6:	4b25      	ldr	r3, [pc, #148]	; (800427c <_vfiprintf_r+0x224>)
 80041e8:	bb03      	cbnz	r3, 800422c <_vfiprintf_r+0x1d4>
 80041ea:	9b03      	ldr	r3, [sp, #12]
 80041ec:	3307      	adds	r3, #7
 80041ee:	f023 0307 	bic.w	r3, r3, #7
 80041f2:	3308      	adds	r3, #8
 80041f4:	9303      	str	r3, [sp, #12]
 80041f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041f8:	444b      	add	r3, r9
 80041fa:	9309      	str	r3, [sp, #36]	; 0x24
 80041fc:	e74c      	b.n	8004098 <_vfiprintf_r+0x40>
 80041fe:	fb00 3202 	mla	r2, r0, r2, r3
 8004202:	2101      	movs	r1, #1
 8004204:	e786      	b.n	8004114 <_vfiprintf_r+0xbc>
 8004206:	2300      	movs	r3, #0
 8004208:	9305      	str	r3, [sp, #20]
 800420a:	4618      	mov	r0, r3
 800420c:	250a      	movs	r5, #10
 800420e:	4688      	mov	r8, r1
 8004210:	3101      	adds	r1, #1
 8004212:	f898 2000 	ldrb.w	r2, [r8]
 8004216:	3a30      	subs	r2, #48	; 0x30
 8004218:	2a09      	cmp	r2, #9
 800421a:	d903      	bls.n	8004224 <_vfiprintf_r+0x1cc>
 800421c:	2b00      	cmp	r3, #0
 800421e:	d0c5      	beq.n	80041ac <_vfiprintf_r+0x154>
 8004220:	9005      	str	r0, [sp, #20]
 8004222:	e7c3      	b.n	80041ac <_vfiprintf_r+0x154>
 8004224:	fb05 2000 	mla	r0, r5, r0, r2
 8004228:	2301      	movs	r3, #1
 800422a:	e7f0      	b.n	800420e <_vfiprintf_r+0x1b6>
 800422c:	ab03      	add	r3, sp, #12
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	4622      	mov	r2, r4
 8004232:	4b13      	ldr	r3, [pc, #76]	; (8004280 <_vfiprintf_r+0x228>)
 8004234:	a904      	add	r1, sp, #16
 8004236:	4630      	mov	r0, r6
 8004238:	f3af 8000 	nop.w
 800423c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004240:	4681      	mov	r9, r0
 8004242:	d1d8      	bne.n	80041f6 <_vfiprintf_r+0x19e>
 8004244:	89a3      	ldrh	r3, [r4, #12]
 8004246:	065b      	lsls	r3, r3, #25
 8004248:	f53f af7d 	bmi.w	8004146 <_vfiprintf_r+0xee>
 800424c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800424e:	e77c      	b.n	800414a <_vfiprintf_r+0xf2>
 8004250:	ab03      	add	r3, sp, #12
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	4622      	mov	r2, r4
 8004256:	4b0a      	ldr	r3, [pc, #40]	; (8004280 <_vfiprintf_r+0x228>)
 8004258:	a904      	add	r1, sp, #16
 800425a:	4630      	mov	r0, r6
 800425c:	f000 f888 	bl	8004370 <_printf_i>
 8004260:	e7ec      	b.n	800423c <_vfiprintf_r+0x1e4>
 8004262:	bf00      	nop
 8004264:	08004bd0 	.word	0x08004bd0
 8004268:	08004c10 	.word	0x08004c10
 800426c:	08004bf0 	.word	0x08004bf0
 8004270:	08004bb0 	.word	0x08004bb0
 8004274:	08004c16 	.word	0x08004c16
 8004278:	08004c1a 	.word	0x08004c1a
 800427c:	00000000 	.word	0x00000000
 8004280:	08004035 	.word	0x08004035

08004284 <_printf_common>:
 8004284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004288:	4691      	mov	r9, r2
 800428a:	461f      	mov	r7, r3
 800428c:	688a      	ldr	r2, [r1, #8]
 800428e:	690b      	ldr	r3, [r1, #16]
 8004290:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004294:	4293      	cmp	r3, r2
 8004296:	bfb8      	it	lt
 8004298:	4613      	movlt	r3, r2
 800429a:	f8c9 3000 	str.w	r3, [r9]
 800429e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042a2:	4606      	mov	r6, r0
 80042a4:	460c      	mov	r4, r1
 80042a6:	b112      	cbz	r2, 80042ae <_printf_common+0x2a>
 80042a8:	3301      	adds	r3, #1
 80042aa:	f8c9 3000 	str.w	r3, [r9]
 80042ae:	6823      	ldr	r3, [r4, #0]
 80042b0:	0699      	lsls	r1, r3, #26
 80042b2:	bf42      	ittt	mi
 80042b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80042b8:	3302      	addmi	r3, #2
 80042ba:	f8c9 3000 	strmi.w	r3, [r9]
 80042be:	6825      	ldr	r5, [r4, #0]
 80042c0:	f015 0506 	ands.w	r5, r5, #6
 80042c4:	d107      	bne.n	80042d6 <_printf_common+0x52>
 80042c6:	f104 0a19 	add.w	sl, r4, #25
 80042ca:	68e3      	ldr	r3, [r4, #12]
 80042cc:	f8d9 2000 	ldr.w	r2, [r9]
 80042d0:	1a9b      	subs	r3, r3, r2
 80042d2:	429d      	cmp	r5, r3
 80042d4:	db29      	blt.n	800432a <_printf_common+0xa6>
 80042d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80042da:	6822      	ldr	r2, [r4, #0]
 80042dc:	3300      	adds	r3, #0
 80042de:	bf18      	it	ne
 80042e0:	2301      	movne	r3, #1
 80042e2:	0692      	lsls	r2, r2, #26
 80042e4:	d42e      	bmi.n	8004344 <_printf_common+0xc0>
 80042e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042ea:	4639      	mov	r1, r7
 80042ec:	4630      	mov	r0, r6
 80042ee:	47c0      	blx	r8
 80042f0:	3001      	adds	r0, #1
 80042f2:	d021      	beq.n	8004338 <_printf_common+0xb4>
 80042f4:	6823      	ldr	r3, [r4, #0]
 80042f6:	68e5      	ldr	r5, [r4, #12]
 80042f8:	f8d9 2000 	ldr.w	r2, [r9]
 80042fc:	f003 0306 	and.w	r3, r3, #6
 8004300:	2b04      	cmp	r3, #4
 8004302:	bf08      	it	eq
 8004304:	1aad      	subeq	r5, r5, r2
 8004306:	68a3      	ldr	r3, [r4, #8]
 8004308:	6922      	ldr	r2, [r4, #16]
 800430a:	bf0c      	ite	eq
 800430c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004310:	2500      	movne	r5, #0
 8004312:	4293      	cmp	r3, r2
 8004314:	bfc4      	itt	gt
 8004316:	1a9b      	subgt	r3, r3, r2
 8004318:	18ed      	addgt	r5, r5, r3
 800431a:	f04f 0900 	mov.w	r9, #0
 800431e:	341a      	adds	r4, #26
 8004320:	454d      	cmp	r5, r9
 8004322:	d11b      	bne.n	800435c <_printf_common+0xd8>
 8004324:	2000      	movs	r0, #0
 8004326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800432a:	2301      	movs	r3, #1
 800432c:	4652      	mov	r2, sl
 800432e:	4639      	mov	r1, r7
 8004330:	4630      	mov	r0, r6
 8004332:	47c0      	blx	r8
 8004334:	3001      	adds	r0, #1
 8004336:	d103      	bne.n	8004340 <_printf_common+0xbc>
 8004338:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800433c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004340:	3501      	adds	r5, #1
 8004342:	e7c2      	b.n	80042ca <_printf_common+0x46>
 8004344:	18e1      	adds	r1, r4, r3
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	2030      	movs	r0, #48	; 0x30
 800434a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800434e:	4422      	add	r2, r4
 8004350:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004354:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004358:	3302      	adds	r3, #2
 800435a:	e7c4      	b.n	80042e6 <_printf_common+0x62>
 800435c:	2301      	movs	r3, #1
 800435e:	4622      	mov	r2, r4
 8004360:	4639      	mov	r1, r7
 8004362:	4630      	mov	r0, r6
 8004364:	47c0      	blx	r8
 8004366:	3001      	adds	r0, #1
 8004368:	d0e6      	beq.n	8004338 <_printf_common+0xb4>
 800436a:	f109 0901 	add.w	r9, r9, #1
 800436e:	e7d7      	b.n	8004320 <_printf_common+0x9c>

08004370 <_printf_i>:
 8004370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004374:	4617      	mov	r7, r2
 8004376:	7e0a      	ldrb	r2, [r1, #24]
 8004378:	b085      	sub	sp, #20
 800437a:	2a6e      	cmp	r2, #110	; 0x6e
 800437c:	4698      	mov	r8, r3
 800437e:	4606      	mov	r6, r0
 8004380:	460c      	mov	r4, r1
 8004382:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004384:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004388:	f000 80bc 	beq.w	8004504 <_printf_i+0x194>
 800438c:	d81a      	bhi.n	80043c4 <_printf_i+0x54>
 800438e:	2a63      	cmp	r2, #99	; 0x63
 8004390:	d02e      	beq.n	80043f0 <_printf_i+0x80>
 8004392:	d80a      	bhi.n	80043aa <_printf_i+0x3a>
 8004394:	2a00      	cmp	r2, #0
 8004396:	f000 80c8 	beq.w	800452a <_printf_i+0x1ba>
 800439a:	2a58      	cmp	r2, #88	; 0x58
 800439c:	f000 808a 	beq.w	80044b4 <_printf_i+0x144>
 80043a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043a4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80043a8:	e02a      	b.n	8004400 <_printf_i+0x90>
 80043aa:	2a64      	cmp	r2, #100	; 0x64
 80043ac:	d001      	beq.n	80043b2 <_printf_i+0x42>
 80043ae:	2a69      	cmp	r2, #105	; 0x69
 80043b0:	d1f6      	bne.n	80043a0 <_printf_i+0x30>
 80043b2:	6821      	ldr	r1, [r4, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80043ba:	d023      	beq.n	8004404 <_printf_i+0x94>
 80043bc:	1d11      	adds	r1, r2, #4
 80043be:	6019      	str	r1, [r3, #0]
 80043c0:	6813      	ldr	r3, [r2, #0]
 80043c2:	e027      	b.n	8004414 <_printf_i+0xa4>
 80043c4:	2a73      	cmp	r2, #115	; 0x73
 80043c6:	f000 80b4 	beq.w	8004532 <_printf_i+0x1c2>
 80043ca:	d808      	bhi.n	80043de <_printf_i+0x6e>
 80043cc:	2a6f      	cmp	r2, #111	; 0x6f
 80043ce:	d02a      	beq.n	8004426 <_printf_i+0xb6>
 80043d0:	2a70      	cmp	r2, #112	; 0x70
 80043d2:	d1e5      	bne.n	80043a0 <_printf_i+0x30>
 80043d4:	680a      	ldr	r2, [r1, #0]
 80043d6:	f042 0220 	orr.w	r2, r2, #32
 80043da:	600a      	str	r2, [r1, #0]
 80043dc:	e003      	b.n	80043e6 <_printf_i+0x76>
 80043de:	2a75      	cmp	r2, #117	; 0x75
 80043e0:	d021      	beq.n	8004426 <_printf_i+0xb6>
 80043e2:	2a78      	cmp	r2, #120	; 0x78
 80043e4:	d1dc      	bne.n	80043a0 <_printf_i+0x30>
 80043e6:	2278      	movs	r2, #120	; 0x78
 80043e8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80043ec:	496e      	ldr	r1, [pc, #440]	; (80045a8 <_printf_i+0x238>)
 80043ee:	e064      	b.n	80044ba <_printf_i+0x14a>
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80043f6:	1d11      	adds	r1, r2, #4
 80043f8:	6019      	str	r1, [r3, #0]
 80043fa:	6813      	ldr	r3, [r2, #0]
 80043fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004400:	2301      	movs	r3, #1
 8004402:	e0a3      	b.n	800454c <_printf_i+0x1dc>
 8004404:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004408:	f102 0104 	add.w	r1, r2, #4
 800440c:	6019      	str	r1, [r3, #0]
 800440e:	d0d7      	beq.n	80043c0 <_printf_i+0x50>
 8004410:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004414:	2b00      	cmp	r3, #0
 8004416:	da03      	bge.n	8004420 <_printf_i+0xb0>
 8004418:	222d      	movs	r2, #45	; 0x2d
 800441a:	425b      	negs	r3, r3
 800441c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004420:	4962      	ldr	r1, [pc, #392]	; (80045ac <_printf_i+0x23c>)
 8004422:	220a      	movs	r2, #10
 8004424:	e017      	b.n	8004456 <_printf_i+0xe6>
 8004426:	6820      	ldr	r0, [r4, #0]
 8004428:	6819      	ldr	r1, [r3, #0]
 800442a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800442e:	d003      	beq.n	8004438 <_printf_i+0xc8>
 8004430:	1d08      	adds	r0, r1, #4
 8004432:	6018      	str	r0, [r3, #0]
 8004434:	680b      	ldr	r3, [r1, #0]
 8004436:	e006      	b.n	8004446 <_printf_i+0xd6>
 8004438:	f010 0f40 	tst.w	r0, #64	; 0x40
 800443c:	f101 0004 	add.w	r0, r1, #4
 8004440:	6018      	str	r0, [r3, #0]
 8004442:	d0f7      	beq.n	8004434 <_printf_i+0xc4>
 8004444:	880b      	ldrh	r3, [r1, #0]
 8004446:	4959      	ldr	r1, [pc, #356]	; (80045ac <_printf_i+0x23c>)
 8004448:	2a6f      	cmp	r2, #111	; 0x6f
 800444a:	bf14      	ite	ne
 800444c:	220a      	movne	r2, #10
 800444e:	2208      	moveq	r2, #8
 8004450:	2000      	movs	r0, #0
 8004452:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004456:	6865      	ldr	r5, [r4, #4]
 8004458:	60a5      	str	r5, [r4, #8]
 800445a:	2d00      	cmp	r5, #0
 800445c:	f2c0 809c 	blt.w	8004598 <_printf_i+0x228>
 8004460:	6820      	ldr	r0, [r4, #0]
 8004462:	f020 0004 	bic.w	r0, r0, #4
 8004466:	6020      	str	r0, [r4, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d13f      	bne.n	80044ec <_printf_i+0x17c>
 800446c:	2d00      	cmp	r5, #0
 800446e:	f040 8095 	bne.w	800459c <_printf_i+0x22c>
 8004472:	4675      	mov	r5, lr
 8004474:	2a08      	cmp	r2, #8
 8004476:	d10b      	bne.n	8004490 <_printf_i+0x120>
 8004478:	6823      	ldr	r3, [r4, #0]
 800447a:	07da      	lsls	r2, r3, #31
 800447c:	d508      	bpl.n	8004490 <_printf_i+0x120>
 800447e:	6923      	ldr	r3, [r4, #16]
 8004480:	6862      	ldr	r2, [r4, #4]
 8004482:	429a      	cmp	r2, r3
 8004484:	bfde      	ittt	le
 8004486:	2330      	movle	r3, #48	; 0x30
 8004488:	f805 3c01 	strble.w	r3, [r5, #-1]
 800448c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004490:	ebae 0305 	sub.w	r3, lr, r5
 8004494:	6123      	str	r3, [r4, #16]
 8004496:	f8cd 8000 	str.w	r8, [sp]
 800449a:	463b      	mov	r3, r7
 800449c:	aa03      	add	r2, sp, #12
 800449e:	4621      	mov	r1, r4
 80044a0:	4630      	mov	r0, r6
 80044a2:	f7ff feef 	bl	8004284 <_printf_common>
 80044a6:	3001      	adds	r0, #1
 80044a8:	d155      	bne.n	8004556 <_printf_i+0x1e6>
 80044aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044ae:	b005      	add	sp, #20
 80044b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80044b4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80044b8:	493c      	ldr	r1, [pc, #240]	; (80045ac <_printf_i+0x23c>)
 80044ba:	6822      	ldr	r2, [r4, #0]
 80044bc:	6818      	ldr	r0, [r3, #0]
 80044be:	f012 0f80 	tst.w	r2, #128	; 0x80
 80044c2:	f100 0504 	add.w	r5, r0, #4
 80044c6:	601d      	str	r5, [r3, #0]
 80044c8:	d001      	beq.n	80044ce <_printf_i+0x15e>
 80044ca:	6803      	ldr	r3, [r0, #0]
 80044cc:	e002      	b.n	80044d4 <_printf_i+0x164>
 80044ce:	0655      	lsls	r5, r2, #25
 80044d0:	d5fb      	bpl.n	80044ca <_printf_i+0x15a>
 80044d2:	8803      	ldrh	r3, [r0, #0]
 80044d4:	07d0      	lsls	r0, r2, #31
 80044d6:	bf44      	itt	mi
 80044d8:	f042 0220 	orrmi.w	r2, r2, #32
 80044dc:	6022      	strmi	r2, [r4, #0]
 80044de:	b91b      	cbnz	r3, 80044e8 <_printf_i+0x178>
 80044e0:	6822      	ldr	r2, [r4, #0]
 80044e2:	f022 0220 	bic.w	r2, r2, #32
 80044e6:	6022      	str	r2, [r4, #0]
 80044e8:	2210      	movs	r2, #16
 80044ea:	e7b1      	b.n	8004450 <_printf_i+0xe0>
 80044ec:	4675      	mov	r5, lr
 80044ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80044f2:	fb02 3310 	mls	r3, r2, r0, r3
 80044f6:	5ccb      	ldrb	r3, [r1, r3]
 80044f8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80044fc:	4603      	mov	r3, r0
 80044fe:	2800      	cmp	r0, #0
 8004500:	d1f5      	bne.n	80044ee <_printf_i+0x17e>
 8004502:	e7b7      	b.n	8004474 <_printf_i+0x104>
 8004504:	6808      	ldr	r0, [r1, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	6949      	ldr	r1, [r1, #20]
 800450a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800450e:	d004      	beq.n	800451a <_printf_i+0x1aa>
 8004510:	1d10      	adds	r0, r2, #4
 8004512:	6018      	str	r0, [r3, #0]
 8004514:	6813      	ldr	r3, [r2, #0]
 8004516:	6019      	str	r1, [r3, #0]
 8004518:	e007      	b.n	800452a <_printf_i+0x1ba>
 800451a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800451e:	f102 0004 	add.w	r0, r2, #4
 8004522:	6018      	str	r0, [r3, #0]
 8004524:	6813      	ldr	r3, [r2, #0]
 8004526:	d0f6      	beq.n	8004516 <_printf_i+0x1a6>
 8004528:	8019      	strh	r1, [r3, #0]
 800452a:	2300      	movs	r3, #0
 800452c:	6123      	str	r3, [r4, #16]
 800452e:	4675      	mov	r5, lr
 8004530:	e7b1      	b.n	8004496 <_printf_i+0x126>
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	1d11      	adds	r1, r2, #4
 8004536:	6019      	str	r1, [r3, #0]
 8004538:	6815      	ldr	r5, [r2, #0]
 800453a:	6862      	ldr	r2, [r4, #4]
 800453c:	2100      	movs	r1, #0
 800453e:	4628      	mov	r0, r5
 8004540:	f7fb fe46 	bl	80001d0 <memchr>
 8004544:	b108      	cbz	r0, 800454a <_printf_i+0x1da>
 8004546:	1b40      	subs	r0, r0, r5
 8004548:	6060      	str	r0, [r4, #4]
 800454a:	6863      	ldr	r3, [r4, #4]
 800454c:	6123      	str	r3, [r4, #16]
 800454e:	2300      	movs	r3, #0
 8004550:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004554:	e79f      	b.n	8004496 <_printf_i+0x126>
 8004556:	6923      	ldr	r3, [r4, #16]
 8004558:	462a      	mov	r2, r5
 800455a:	4639      	mov	r1, r7
 800455c:	4630      	mov	r0, r6
 800455e:	47c0      	blx	r8
 8004560:	3001      	adds	r0, #1
 8004562:	d0a2      	beq.n	80044aa <_printf_i+0x13a>
 8004564:	6823      	ldr	r3, [r4, #0]
 8004566:	079b      	lsls	r3, r3, #30
 8004568:	d507      	bpl.n	800457a <_printf_i+0x20a>
 800456a:	2500      	movs	r5, #0
 800456c:	f104 0919 	add.w	r9, r4, #25
 8004570:	68e3      	ldr	r3, [r4, #12]
 8004572:	9a03      	ldr	r2, [sp, #12]
 8004574:	1a9b      	subs	r3, r3, r2
 8004576:	429d      	cmp	r5, r3
 8004578:	db05      	blt.n	8004586 <_printf_i+0x216>
 800457a:	68e0      	ldr	r0, [r4, #12]
 800457c:	9b03      	ldr	r3, [sp, #12]
 800457e:	4298      	cmp	r0, r3
 8004580:	bfb8      	it	lt
 8004582:	4618      	movlt	r0, r3
 8004584:	e793      	b.n	80044ae <_printf_i+0x13e>
 8004586:	2301      	movs	r3, #1
 8004588:	464a      	mov	r2, r9
 800458a:	4639      	mov	r1, r7
 800458c:	4630      	mov	r0, r6
 800458e:	47c0      	blx	r8
 8004590:	3001      	adds	r0, #1
 8004592:	d08a      	beq.n	80044aa <_printf_i+0x13a>
 8004594:	3501      	adds	r5, #1
 8004596:	e7eb      	b.n	8004570 <_printf_i+0x200>
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1a7      	bne.n	80044ec <_printf_i+0x17c>
 800459c:	780b      	ldrb	r3, [r1, #0]
 800459e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045a6:	e765      	b.n	8004474 <_printf_i+0x104>
 80045a8:	08004c32 	.word	0x08004c32
 80045ac:	08004c21 	.word	0x08004c21

080045b0 <_sbrk_r>:
 80045b0:	b538      	push	{r3, r4, r5, lr}
 80045b2:	4c06      	ldr	r4, [pc, #24]	; (80045cc <_sbrk_r+0x1c>)
 80045b4:	2300      	movs	r3, #0
 80045b6:	4605      	mov	r5, r0
 80045b8:	4608      	mov	r0, r1
 80045ba:	6023      	str	r3, [r4, #0]
 80045bc:	f7fc fa5c 	bl	8000a78 <_sbrk>
 80045c0:	1c43      	adds	r3, r0, #1
 80045c2:	d102      	bne.n	80045ca <_sbrk_r+0x1a>
 80045c4:	6823      	ldr	r3, [r4, #0]
 80045c6:	b103      	cbz	r3, 80045ca <_sbrk_r+0x1a>
 80045c8:	602b      	str	r3, [r5, #0]
 80045ca:	bd38      	pop	{r3, r4, r5, pc}
 80045cc:	20000174 	.word	0x20000174

080045d0 <__sread>:
 80045d0:	b510      	push	{r4, lr}
 80045d2:	460c      	mov	r4, r1
 80045d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045d8:	f000 fa98 	bl	8004b0c <_read_r>
 80045dc:	2800      	cmp	r0, #0
 80045de:	bfab      	itete	ge
 80045e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80045e2:	89a3      	ldrhlt	r3, [r4, #12]
 80045e4:	181b      	addge	r3, r3, r0
 80045e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80045ea:	bfac      	ite	ge
 80045ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80045ee:	81a3      	strhlt	r3, [r4, #12]
 80045f0:	bd10      	pop	{r4, pc}

080045f2 <__swrite>:
 80045f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045f6:	461f      	mov	r7, r3
 80045f8:	898b      	ldrh	r3, [r1, #12]
 80045fa:	05db      	lsls	r3, r3, #23
 80045fc:	4605      	mov	r5, r0
 80045fe:	460c      	mov	r4, r1
 8004600:	4616      	mov	r6, r2
 8004602:	d505      	bpl.n	8004610 <__swrite+0x1e>
 8004604:	2302      	movs	r3, #2
 8004606:	2200      	movs	r2, #0
 8004608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800460c:	f000 f9b8 	bl	8004980 <_lseek_r>
 8004610:	89a3      	ldrh	r3, [r4, #12]
 8004612:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004616:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800461a:	81a3      	strh	r3, [r4, #12]
 800461c:	4632      	mov	r2, r6
 800461e:	463b      	mov	r3, r7
 8004620:	4628      	mov	r0, r5
 8004622:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004626:	f000 b869 	b.w	80046fc <_write_r>

0800462a <__sseek>:
 800462a:	b510      	push	{r4, lr}
 800462c:	460c      	mov	r4, r1
 800462e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004632:	f000 f9a5 	bl	8004980 <_lseek_r>
 8004636:	1c43      	adds	r3, r0, #1
 8004638:	89a3      	ldrh	r3, [r4, #12]
 800463a:	bf15      	itete	ne
 800463c:	6560      	strne	r0, [r4, #84]	; 0x54
 800463e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004642:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004646:	81a3      	strheq	r3, [r4, #12]
 8004648:	bf18      	it	ne
 800464a:	81a3      	strhne	r3, [r4, #12]
 800464c:	bd10      	pop	{r4, pc}

0800464e <__sclose>:
 800464e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004652:	f000 b8d3 	b.w	80047fc <_close_r>
	...

08004658 <__swbuf_r>:
 8004658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800465a:	460e      	mov	r6, r1
 800465c:	4614      	mov	r4, r2
 800465e:	4605      	mov	r5, r0
 8004660:	b118      	cbz	r0, 800466a <__swbuf_r+0x12>
 8004662:	6983      	ldr	r3, [r0, #24]
 8004664:	b90b      	cbnz	r3, 800466a <__swbuf_r+0x12>
 8004666:	f7ff fbe5 	bl	8003e34 <__sinit>
 800466a:	4b21      	ldr	r3, [pc, #132]	; (80046f0 <__swbuf_r+0x98>)
 800466c:	429c      	cmp	r4, r3
 800466e:	d12a      	bne.n	80046c6 <__swbuf_r+0x6e>
 8004670:	686c      	ldr	r4, [r5, #4]
 8004672:	69a3      	ldr	r3, [r4, #24]
 8004674:	60a3      	str	r3, [r4, #8]
 8004676:	89a3      	ldrh	r3, [r4, #12]
 8004678:	071a      	lsls	r2, r3, #28
 800467a:	d52e      	bpl.n	80046da <__swbuf_r+0x82>
 800467c:	6923      	ldr	r3, [r4, #16]
 800467e:	b363      	cbz	r3, 80046da <__swbuf_r+0x82>
 8004680:	6923      	ldr	r3, [r4, #16]
 8004682:	6820      	ldr	r0, [r4, #0]
 8004684:	1ac0      	subs	r0, r0, r3
 8004686:	6963      	ldr	r3, [r4, #20]
 8004688:	b2f6      	uxtb	r6, r6
 800468a:	4298      	cmp	r0, r3
 800468c:	4637      	mov	r7, r6
 800468e:	db04      	blt.n	800469a <__swbuf_r+0x42>
 8004690:	4621      	mov	r1, r4
 8004692:	4628      	mov	r0, r5
 8004694:	f000 f94a 	bl	800492c <_fflush_r>
 8004698:	bb28      	cbnz	r0, 80046e6 <__swbuf_r+0x8e>
 800469a:	68a3      	ldr	r3, [r4, #8]
 800469c:	3b01      	subs	r3, #1
 800469e:	60a3      	str	r3, [r4, #8]
 80046a0:	6823      	ldr	r3, [r4, #0]
 80046a2:	1c5a      	adds	r2, r3, #1
 80046a4:	6022      	str	r2, [r4, #0]
 80046a6:	701e      	strb	r6, [r3, #0]
 80046a8:	6963      	ldr	r3, [r4, #20]
 80046aa:	3001      	adds	r0, #1
 80046ac:	4298      	cmp	r0, r3
 80046ae:	d004      	beq.n	80046ba <__swbuf_r+0x62>
 80046b0:	89a3      	ldrh	r3, [r4, #12]
 80046b2:	07db      	lsls	r3, r3, #31
 80046b4:	d519      	bpl.n	80046ea <__swbuf_r+0x92>
 80046b6:	2e0a      	cmp	r6, #10
 80046b8:	d117      	bne.n	80046ea <__swbuf_r+0x92>
 80046ba:	4621      	mov	r1, r4
 80046bc:	4628      	mov	r0, r5
 80046be:	f000 f935 	bl	800492c <_fflush_r>
 80046c2:	b190      	cbz	r0, 80046ea <__swbuf_r+0x92>
 80046c4:	e00f      	b.n	80046e6 <__swbuf_r+0x8e>
 80046c6:	4b0b      	ldr	r3, [pc, #44]	; (80046f4 <__swbuf_r+0x9c>)
 80046c8:	429c      	cmp	r4, r3
 80046ca:	d101      	bne.n	80046d0 <__swbuf_r+0x78>
 80046cc:	68ac      	ldr	r4, [r5, #8]
 80046ce:	e7d0      	b.n	8004672 <__swbuf_r+0x1a>
 80046d0:	4b09      	ldr	r3, [pc, #36]	; (80046f8 <__swbuf_r+0xa0>)
 80046d2:	429c      	cmp	r4, r3
 80046d4:	bf08      	it	eq
 80046d6:	68ec      	ldreq	r4, [r5, #12]
 80046d8:	e7cb      	b.n	8004672 <__swbuf_r+0x1a>
 80046da:	4621      	mov	r1, r4
 80046dc:	4628      	mov	r0, r5
 80046de:	f000 f81f 	bl	8004720 <__swsetup_r>
 80046e2:	2800      	cmp	r0, #0
 80046e4:	d0cc      	beq.n	8004680 <__swbuf_r+0x28>
 80046e6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80046ea:	4638      	mov	r0, r7
 80046ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046ee:	bf00      	nop
 80046f0:	08004bd0 	.word	0x08004bd0
 80046f4:	08004bf0 	.word	0x08004bf0
 80046f8:	08004bb0 	.word	0x08004bb0

080046fc <_write_r>:
 80046fc:	b538      	push	{r3, r4, r5, lr}
 80046fe:	4c07      	ldr	r4, [pc, #28]	; (800471c <_write_r+0x20>)
 8004700:	4605      	mov	r5, r0
 8004702:	4608      	mov	r0, r1
 8004704:	4611      	mov	r1, r2
 8004706:	2200      	movs	r2, #0
 8004708:	6022      	str	r2, [r4, #0]
 800470a:	461a      	mov	r2, r3
 800470c:	f7fc f997 	bl	8000a3e <_write>
 8004710:	1c43      	adds	r3, r0, #1
 8004712:	d102      	bne.n	800471a <_write_r+0x1e>
 8004714:	6823      	ldr	r3, [r4, #0]
 8004716:	b103      	cbz	r3, 800471a <_write_r+0x1e>
 8004718:	602b      	str	r3, [r5, #0]
 800471a:	bd38      	pop	{r3, r4, r5, pc}
 800471c:	20000174 	.word	0x20000174

08004720 <__swsetup_r>:
 8004720:	4b32      	ldr	r3, [pc, #200]	; (80047ec <__swsetup_r+0xcc>)
 8004722:	b570      	push	{r4, r5, r6, lr}
 8004724:	681d      	ldr	r5, [r3, #0]
 8004726:	4606      	mov	r6, r0
 8004728:	460c      	mov	r4, r1
 800472a:	b125      	cbz	r5, 8004736 <__swsetup_r+0x16>
 800472c:	69ab      	ldr	r3, [r5, #24]
 800472e:	b913      	cbnz	r3, 8004736 <__swsetup_r+0x16>
 8004730:	4628      	mov	r0, r5
 8004732:	f7ff fb7f 	bl	8003e34 <__sinit>
 8004736:	4b2e      	ldr	r3, [pc, #184]	; (80047f0 <__swsetup_r+0xd0>)
 8004738:	429c      	cmp	r4, r3
 800473a:	d10f      	bne.n	800475c <__swsetup_r+0x3c>
 800473c:	686c      	ldr	r4, [r5, #4]
 800473e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004742:	b29a      	uxth	r2, r3
 8004744:	0715      	lsls	r5, r2, #28
 8004746:	d42c      	bmi.n	80047a2 <__swsetup_r+0x82>
 8004748:	06d0      	lsls	r0, r2, #27
 800474a:	d411      	bmi.n	8004770 <__swsetup_r+0x50>
 800474c:	2209      	movs	r2, #9
 800474e:	6032      	str	r2, [r6, #0]
 8004750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004754:	81a3      	strh	r3, [r4, #12]
 8004756:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800475a:	bd70      	pop	{r4, r5, r6, pc}
 800475c:	4b25      	ldr	r3, [pc, #148]	; (80047f4 <__swsetup_r+0xd4>)
 800475e:	429c      	cmp	r4, r3
 8004760:	d101      	bne.n	8004766 <__swsetup_r+0x46>
 8004762:	68ac      	ldr	r4, [r5, #8]
 8004764:	e7eb      	b.n	800473e <__swsetup_r+0x1e>
 8004766:	4b24      	ldr	r3, [pc, #144]	; (80047f8 <__swsetup_r+0xd8>)
 8004768:	429c      	cmp	r4, r3
 800476a:	bf08      	it	eq
 800476c:	68ec      	ldreq	r4, [r5, #12]
 800476e:	e7e6      	b.n	800473e <__swsetup_r+0x1e>
 8004770:	0751      	lsls	r1, r2, #29
 8004772:	d512      	bpl.n	800479a <__swsetup_r+0x7a>
 8004774:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004776:	b141      	cbz	r1, 800478a <__swsetup_r+0x6a>
 8004778:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800477c:	4299      	cmp	r1, r3
 800477e:	d002      	beq.n	8004786 <__swsetup_r+0x66>
 8004780:	4630      	mov	r0, r6
 8004782:	f000 f975 	bl	8004a70 <_free_r>
 8004786:	2300      	movs	r3, #0
 8004788:	6363      	str	r3, [r4, #52]	; 0x34
 800478a:	89a3      	ldrh	r3, [r4, #12]
 800478c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004790:	81a3      	strh	r3, [r4, #12]
 8004792:	2300      	movs	r3, #0
 8004794:	6063      	str	r3, [r4, #4]
 8004796:	6923      	ldr	r3, [r4, #16]
 8004798:	6023      	str	r3, [r4, #0]
 800479a:	89a3      	ldrh	r3, [r4, #12]
 800479c:	f043 0308 	orr.w	r3, r3, #8
 80047a0:	81a3      	strh	r3, [r4, #12]
 80047a2:	6923      	ldr	r3, [r4, #16]
 80047a4:	b94b      	cbnz	r3, 80047ba <__swsetup_r+0x9a>
 80047a6:	89a3      	ldrh	r3, [r4, #12]
 80047a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80047ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047b0:	d003      	beq.n	80047ba <__swsetup_r+0x9a>
 80047b2:	4621      	mov	r1, r4
 80047b4:	4630      	mov	r0, r6
 80047b6:	f000 f919 	bl	80049ec <__smakebuf_r>
 80047ba:	89a2      	ldrh	r2, [r4, #12]
 80047bc:	f012 0301 	ands.w	r3, r2, #1
 80047c0:	d00c      	beq.n	80047dc <__swsetup_r+0xbc>
 80047c2:	2300      	movs	r3, #0
 80047c4:	60a3      	str	r3, [r4, #8]
 80047c6:	6963      	ldr	r3, [r4, #20]
 80047c8:	425b      	negs	r3, r3
 80047ca:	61a3      	str	r3, [r4, #24]
 80047cc:	6923      	ldr	r3, [r4, #16]
 80047ce:	b953      	cbnz	r3, 80047e6 <__swsetup_r+0xc6>
 80047d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047d4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80047d8:	d1ba      	bne.n	8004750 <__swsetup_r+0x30>
 80047da:	bd70      	pop	{r4, r5, r6, pc}
 80047dc:	0792      	lsls	r2, r2, #30
 80047de:	bf58      	it	pl
 80047e0:	6963      	ldrpl	r3, [r4, #20]
 80047e2:	60a3      	str	r3, [r4, #8]
 80047e4:	e7f2      	b.n	80047cc <__swsetup_r+0xac>
 80047e6:	2000      	movs	r0, #0
 80047e8:	e7f7      	b.n	80047da <__swsetup_r+0xba>
 80047ea:	bf00      	nop
 80047ec:	2000000c 	.word	0x2000000c
 80047f0:	08004bd0 	.word	0x08004bd0
 80047f4:	08004bf0 	.word	0x08004bf0
 80047f8:	08004bb0 	.word	0x08004bb0

080047fc <_close_r>:
 80047fc:	b538      	push	{r3, r4, r5, lr}
 80047fe:	4c06      	ldr	r4, [pc, #24]	; (8004818 <_close_r+0x1c>)
 8004800:	2300      	movs	r3, #0
 8004802:	4605      	mov	r5, r0
 8004804:	4608      	mov	r0, r1
 8004806:	6023      	str	r3, [r4, #0]
 8004808:	f7fc f962 	bl	8000ad0 <_close>
 800480c:	1c43      	adds	r3, r0, #1
 800480e:	d102      	bne.n	8004816 <_close_r+0x1a>
 8004810:	6823      	ldr	r3, [r4, #0]
 8004812:	b103      	cbz	r3, 8004816 <_close_r+0x1a>
 8004814:	602b      	str	r3, [r5, #0]
 8004816:	bd38      	pop	{r3, r4, r5, pc}
 8004818:	20000174 	.word	0x20000174

0800481c <__sflush_r>:
 800481c:	898a      	ldrh	r2, [r1, #12]
 800481e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004822:	4605      	mov	r5, r0
 8004824:	0710      	lsls	r0, r2, #28
 8004826:	460c      	mov	r4, r1
 8004828:	d45a      	bmi.n	80048e0 <__sflush_r+0xc4>
 800482a:	684b      	ldr	r3, [r1, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	dc05      	bgt.n	800483c <__sflush_r+0x20>
 8004830:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004832:	2b00      	cmp	r3, #0
 8004834:	dc02      	bgt.n	800483c <__sflush_r+0x20>
 8004836:	2000      	movs	r0, #0
 8004838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800483c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800483e:	2e00      	cmp	r6, #0
 8004840:	d0f9      	beq.n	8004836 <__sflush_r+0x1a>
 8004842:	2300      	movs	r3, #0
 8004844:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004848:	682f      	ldr	r7, [r5, #0]
 800484a:	602b      	str	r3, [r5, #0]
 800484c:	d033      	beq.n	80048b6 <__sflush_r+0x9a>
 800484e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004850:	89a3      	ldrh	r3, [r4, #12]
 8004852:	075a      	lsls	r2, r3, #29
 8004854:	d505      	bpl.n	8004862 <__sflush_r+0x46>
 8004856:	6863      	ldr	r3, [r4, #4]
 8004858:	1ac0      	subs	r0, r0, r3
 800485a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800485c:	b10b      	cbz	r3, 8004862 <__sflush_r+0x46>
 800485e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004860:	1ac0      	subs	r0, r0, r3
 8004862:	2300      	movs	r3, #0
 8004864:	4602      	mov	r2, r0
 8004866:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004868:	6a21      	ldr	r1, [r4, #32]
 800486a:	4628      	mov	r0, r5
 800486c:	47b0      	blx	r6
 800486e:	1c43      	adds	r3, r0, #1
 8004870:	89a3      	ldrh	r3, [r4, #12]
 8004872:	d106      	bne.n	8004882 <__sflush_r+0x66>
 8004874:	6829      	ldr	r1, [r5, #0]
 8004876:	291d      	cmp	r1, #29
 8004878:	d84b      	bhi.n	8004912 <__sflush_r+0xf6>
 800487a:	4a2b      	ldr	r2, [pc, #172]	; (8004928 <__sflush_r+0x10c>)
 800487c:	40ca      	lsrs	r2, r1
 800487e:	07d6      	lsls	r6, r2, #31
 8004880:	d547      	bpl.n	8004912 <__sflush_r+0xf6>
 8004882:	2200      	movs	r2, #0
 8004884:	6062      	str	r2, [r4, #4]
 8004886:	04d9      	lsls	r1, r3, #19
 8004888:	6922      	ldr	r2, [r4, #16]
 800488a:	6022      	str	r2, [r4, #0]
 800488c:	d504      	bpl.n	8004898 <__sflush_r+0x7c>
 800488e:	1c42      	adds	r2, r0, #1
 8004890:	d101      	bne.n	8004896 <__sflush_r+0x7a>
 8004892:	682b      	ldr	r3, [r5, #0]
 8004894:	b903      	cbnz	r3, 8004898 <__sflush_r+0x7c>
 8004896:	6560      	str	r0, [r4, #84]	; 0x54
 8004898:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800489a:	602f      	str	r7, [r5, #0]
 800489c:	2900      	cmp	r1, #0
 800489e:	d0ca      	beq.n	8004836 <__sflush_r+0x1a>
 80048a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048a4:	4299      	cmp	r1, r3
 80048a6:	d002      	beq.n	80048ae <__sflush_r+0x92>
 80048a8:	4628      	mov	r0, r5
 80048aa:	f000 f8e1 	bl	8004a70 <_free_r>
 80048ae:	2000      	movs	r0, #0
 80048b0:	6360      	str	r0, [r4, #52]	; 0x34
 80048b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048b6:	6a21      	ldr	r1, [r4, #32]
 80048b8:	2301      	movs	r3, #1
 80048ba:	4628      	mov	r0, r5
 80048bc:	47b0      	blx	r6
 80048be:	1c41      	adds	r1, r0, #1
 80048c0:	d1c6      	bne.n	8004850 <__sflush_r+0x34>
 80048c2:	682b      	ldr	r3, [r5, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d0c3      	beq.n	8004850 <__sflush_r+0x34>
 80048c8:	2b1d      	cmp	r3, #29
 80048ca:	d001      	beq.n	80048d0 <__sflush_r+0xb4>
 80048cc:	2b16      	cmp	r3, #22
 80048ce:	d101      	bne.n	80048d4 <__sflush_r+0xb8>
 80048d0:	602f      	str	r7, [r5, #0]
 80048d2:	e7b0      	b.n	8004836 <__sflush_r+0x1a>
 80048d4:	89a3      	ldrh	r3, [r4, #12]
 80048d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048da:	81a3      	strh	r3, [r4, #12]
 80048dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048e0:	690f      	ldr	r7, [r1, #16]
 80048e2:	2f00      	cmp	r7, #0
 80048e4:	d0a7      	beq.n	8004836 <__sflush_r+0x1a>
 80048e6:	0793      	lsls	r3, r2, #30
 80048e8:	680e      	ldr	r6, [r1, #0]
 80048ea:	bf08      	it	eq
 80048ec:	694b      	ldreq	r3, [r1, #20]
 80048ee:	600f      	str	r7, [r1, #0]
 80048f0:	bf18      	it	ne
 80048f2:	2300      	movne	r3, #0
 80048f4:	eba6 0807 	sub.w	r8, r6, r7
 80048f8:	608b      	str	r3, [r1, #8]
 80048fa:	f1b8 0f00 	cmp.w	r8, #0
 80048fe:	dd9a      	ble.n	8004836 <__sflush_r+0x1a>
 8004900:	4643      	mov	r3, r8
 8004902:	463a      	mov	r2, r7
 8004904:	6a21      	ldr	r1, [r4, #32]
 8004906:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004908:	4628      	mov	r0, r5
 800490a:	47b0      	blx	r6
 800490c:	2800      	cmp	r0, #0
 800490e:	dc07      	bgt.n	8004920 <__sflush_r+0x104>
 8004910:	89a3      	ldrh	r3, [r4, #12]
 8004912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004916:	81a3      	strh	r3, [r4, #12]
 8004918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800491c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004920:	4407      	add	r7, r0
 8004922:	eba8 0800 	sub.w	r8, r8, r0
 8004926:	e7e8      	b.n	80048fa <__sflush_r+0xde>
 8004928:	20400001 	.word	0x20400001

0800492c <_fflush_r>:
 800492c:	b538      	push	{r3, r4, r5, lr}
 800492e:	690b      	ldr	r3, [r1, #16]
 8004930:	4605      	mov	r5, r0
 8004932:	460c      	mov	r4, r1
 8004934:	b1db      	cbz	r3, 800496e <_fflush_r+0x42>
 8004936:	b118      	cbz	r0, 8004940 <_fflush_r+0x14>
 8004938:	6983      	ldr	r3, [r0, #24]
 800493a:	b90b      	cbnz	r3, 8004940 <_fflush_r+0x14>
 800493c:	f7ff fa7a 	bl	8003e34 <__sinit>
 8004940:	4b0c      	ldr	r3, [pc, #48]	; (8004974 <_fflush_r+0x48>)
 8004942:	429c      	cmp	r4, r3
 8004944:	d109      	bne.n	800495a <_fflush_r+0x2e>
 8004946:	686c      	ldr	r4, [r5, #4]
 8004948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800494c:	b17b      	cbz	r3, 800496e <_fflush_r+0x42>
 800494e:	4621      	mov	r1, r4
 8004950:	4628      	mov	r0, r5
 8004952:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004956:	f7ff bf61 	b.w	800481c <__sflush_r>
 800495a:	4b07      	ldr	r3, [pc, #28]	; (8004978 <_fflush_r+0x4c>)
 800495c:	429c      	cmp	r4, r3
 800495e:	d101      	bne.n	8004964 <_fflush_r+0x38>
 8004960:	68ac      	ldr	r4, [r5, #8]
 8004962:	e7f1      	b.n	8004948 <_fflush_r+0x1c>
 8004964:	4b05      	ldr	r3, [pc, #20]	; (800497c <_fflush_r+0x50>)
 8004966:	429c      	cmp	r4, r3
 8004968:	bf08      	it	eq
 800496a:	68ec      	ldreq	r4, [r5, #12]
 800496c:	e7ec      	b.n	8004948 <_fflush_r+0x1c>
 800496e:	2000      	movs	r0, #0
 8004970:	bd38      	pop	{r3, r4, r5, pc}
 8004972:	bf00      	nop
 8004974:	08004bd0 	.word	0x08004bd0
 8004978:	08004bf0 	.word	0x08004bf0
 800497c:	08004bb0 	.word	0x08004bb0

08004980 <_lseek_r>:
 8004980:	b538      	push	{r3, r4, r5, lr}
 8004982:	4c07      	ldr	r4, [pc, #28]	; (80049a0 <_lseek_r+0x20>)
 8004984:	4605      	mov	r5, r0
 8004986:	4608      	mov	r0, r1
 8004988:	4611      	mov	r1, r2
 800498a:	2200      	movs	r2, #0
 800498c:	6022      	str	r2, [r4, #0]
 800498e:	461a      	mov	r2, r3
 8004990:	f7fc f8c5 	bl	8000b1e <_lseek>
 8004994:	1c43      	adds	r3, r0, #1
 8004996:	d102      	bne.n	800499e <_lseek_r+0x1e>
 8004998:	6823      	ldr	r3, [r4, #0]
 800499a:	b103      	cbz	r3, 800499e <_lseek_r+0x1e>
 800499c:	602b      	str	r3, [r5, #0]
 800499e:	bd38      	pop	{r3, r4, r5, pc}
 80049a0:	20000174 	.word	0x20000174

080049a4 <__swhatbuf_r>:
 80049a4:	b570      	push	{r4, r5, r6, lr}
 80049a6:	460e      	mov	r6, r1
 80049a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049ac:	2900      	cmp	r1, #0
 80049ae:	b090      	sub	sp, #64	; 0x40
 80049b0:	4614      	mov	r4, r2
 80049b2:	461d      	mov	r5, r3
 80049b4:	da07      	bge.n	80049c6 <__swhatbuf_r+0x22>
 80049b6:	2300      	movs	r3, #0
 80049b8:	602b      	str	r3, [r5, #0]
 80049ba:	89b3      	ldrh	r3, [r6, #12]
 80049bc:	061a      	lsls	r2, r3, #24
 80049be:	d410      	bmi.n	80049e2 <__swhatbuf_r+0x3e>
 80049c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049c4:	e00e      	b.n	80049e4 <__swhatbuf_r+0x40>
 80049c6:	aa01      	add	r2, sp, #4
 80049c8:	f000 f8b2 	bl	8004b30 <_fstat_r>
 80049cc:	2800      	cmp	r0, #0
 80049ce:	dbf2      	blt.n	80049b6 <__swhatbuf_r+0x12>
 80049d0:	9a02      	ldr	r2, [sp, #8]
 80049d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80049d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80049da:	425a      	negs	r2, r3
 80049dc:	415a      	adcs	r2, r3
 80049de:	602a      	str	r2, [r5, #0]
 80049e0:	e7ee      	b.n	80049c0 <__swhatbuf_r+0x1c>
 80049e2:	2340      	movs	r3, #64	; 0x40
 80049e4:	2000      	movs	r0, #0
 80049e6:	6023      	str	r3, [r4, #0]
 80049e8:	b010      	add	sp, #64	; 0x40
 80049ea:	bd70      	pop	{r4, r5, r6, pc}

080049ec <__smakebuf_r>:
 80049ec:	898b      	ldrh	r3, [r1, #12]
 80049ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80049f0:	079d      	lsls	r5, r3, #30
 80049f2:	4606      	mov	r6, r0
 80049f4:	460c      	mov	r4, r1
 80049f6:	d507      	bpl.n	8004a08 <__smakebuf_r+0x1c>
 80049f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80049fc:	6023      	str	r3, [r4, #0]
 80049fe:	6123      	str	r3, [r4, #16]
 8004a00:	2301      	movs	r3, #1
 8004a02:	6163      	str	r3, [r4, #20]
 8004a04:	b002      	add	sp, #8
 8004a06:	bd70      	pop	{r4, r5, r6, pc}
 8004a08:	ab01      	add	r3, sp, #4
 8004a0a:	466a      	mov	r2, sp
 8004a0c:	f7ff ffca 	bl	80049a4 <__swhatbuf_r>
 8004a10:	9900      	ldr	r1, [sp, #0]
 8004a12:	4605      	mov	r5, r0
 8004a14:	4630      	mov	r0, r6
 8004a16:	f7ff fa97 	bl	8003f48 <_malloc_r>
 8004a1a:	b948      	cbnz	r0, 8004a30 <__smakebuf_r+0x44>
 8004a1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a20:	059a      	lsls	r2, r3, #22
 8004a22:	d4ef      	bmi.n	8004a04 <__smakebuf_r+0x18>
 8004a24:	f023 0303 	bic.w	r3, r3, #3
 8004a28:	f043 0302 	orr.w	r3, r3, #2
 8004a2c:	81a3      	strh	r3, [r4, #12]
 8004a2e:	e7e3      	b.n	80049f8 <__smakebuf_r+0xc>
 8004a30:	4b0d      	ldr	r3, [pc, #52]	; (8004a68 <__smakebuf_r+0x7c>)
 8004a32:	62b3      	str	r3, [r6, #40]	; 0x28
 8004a34:	89a3      	ldrh	r3, [r4, #12]
 8004a36:	6020      	str	r0, [r4, #0]
 8004a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a3c:	81a3      	strh	r3, [r4, #12]
 8004a3e:	9b00      	ldr	r3, [sp, #0]
 8004a40:	6163      	str	r3, [r4, #20]
 8004a42:	9b01      	ldr	r3, [sp, #4]
 8004a44:	6120      	str	r0, [r4, #16]
 8004a46:	b15b      	cbz	r3, 8004a60 <__smakebuf_r+0x74>
 8004a48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a4c:	4630      	mov	r0, r6
 8004a4e:	f000 f881 	bl	8004b54 <_isatty_r>
 8004a52:	b128      	cbz	r0, 8004a60 <__smakebuf_r+0x74>
 8004a54:	89a3      	ldrh	r3, [r4, #12]
 8004a56:	f023 0303 	bic.w	r3, r3, #3
 8004a5a:	f043 0301 	orr.w	r3, r3, #1
 8004a5e:	81a3      	strh	r3, [r4, #12]
 8004a60:	89a3      	ldrh	r3, [r4, #12]
 8004a62:	431d      	orrs	r5, r3
 8004a64:	81a5      	strh	r5, [r4, #12]
 8004a66:	e7cd      	b.n	8004a04 <__smakebuf_r+0x18>
 8004a68:	08003db5 	.word	0x08003db5

08004a6c <__malloc_lock>:
 8004a6c:	4770      	bx	lr

08004a6e <__malloc_unlock>:
 8004a6e:	4770      	bx	lr

08004a70 <_free_r>:
 8004a70:	b538      	push	{r3, r4, r5, lr}
 8004a72:	4605      	mov	r5, r0
 8004a74:	2900      	cmp	r1, #0
 8004a76:	d045      	beq.n	8004b04 <_free_r+0x94>
 8004a78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a7c:	1f0c      	subs	r4, r1, #4
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	bfb8      	it	lt
 8004a82:	18e4      	addlt	r4, r4, r3
 8004a84:	f7ff fff2 	bl	8004a6c <__malloc_lock>
 8004a88:	4a1f      	ldr	r2, [pc, #124]	; (8004b08 <_free_r+0x98>)
 8004a8a:	6813      	ldr	r3, [r2, #0]
 8004a8c:	4610      	mov	r0, r2
 8004a8e:	b933      	cbnz	r3, 8004a9e <_free_r+0x2e>
 8004a90:	6063      	str	r3, [r4, #4]
 8004a92:	6014      	str	r4, [r2, #0]
 8004a94:	4628      	mov	r0, r5
 8004a96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a9a:	f7ff bfe8 	b.w	8004a6e <__malloc_unlock>
 8004a9e:	42a3      	cmp	r3, r4
 8004aa0:	d90c      	bls.n	8004abc <_free_r+0x4c>
 8004aa2:	6821      	ldr	r1, [r4, #0]
 8004aa4:	1862      	adds	r2, r4, r1
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	bf04      	itt	eq
 8004aaa:	681a      	ldreq	r2, [r3, #0]
 8004aac:	685b      	ldreq	r3, [r3, #4]
 8004aae:	6063      	str	r3, [r4, #4]
 8004ab0:	bf04      	itt	eq
 8004ab2:	1852      	addeq	r2, r2, r1
 8004ab4:	6022      	streq	r2, [r4, #0]
 8004ab6:	6004      	str	r4, [r0, #0]
 8004ab8:	e7ec      	b.n	8004a94 <_free_r+0x24>
 8004aba:	4613      	mov	r3, r2
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	b10a      	cbz	r2, 8004ac4 <_free_r+0x54>
 8004ac0:	42a2      	cmp	r2, r4
 8004ac2:	d9fa      	bls.n	8004aba <_free_r+0x4a>
 8004ac4:	6819      	ldr	r1, [r3, #0]
 8004ac6:	1858      	adds	r0, r3, r1
 8004ac8:	42a0      	cmp	r0, r4
 8004aca:	d10b      	bne.n	8004ae4 <_free_r+0x74>
 8004acc:	6820      	ldr	r0, [r4, #0]
 8004ace:	4401      	add	r1, r0
 8004ad0:	1858      	adds	r0, r3, r1
 8004ad2:	4282      	cmp	r2, r0
 8004ad4:	6019      	str	r1, [r3, #0]
 8004ad6:	d1dd      	bne.n	8004a94 <_free_r+0x24>
 8004ad8:	6810      	ldr	r0, [r2, #0]
 8004ada:	6852      	ldr	r2, [r2, #4]
 8004adc:	605a      	str	r2, [r3, #4]
 8004ade:	4401      	add	r1, r0
 8004ae0:	6019      	str	r1, [r3, #0]
 8004ae2:	e7d7      	b.n	8004a94 <_free_r+0x24>
 8004ae4:	d902      	bls.n	8004aec <_free_r+0x7c>
 8004ae6:	230c      	movs	r3, #12
 8004ae8:	602b      	str	r3, [r5, #0]
 8004aea:	e7d3      	b.n	8004a94 <_free_r+0x24>
 8004aec:	6820      	ldr	r0, [r4, #0]
 8004aee:	1821      	adds	r1, r4, r0
 8004af0:	428a      	cmp	r2, r1
 8004af2:	bf04      	itt	eq
 8004af4:	6811      	ldreq	r1, [r2, #0]
 8004af6:	6852      	ldreq	r2, [r2, #4]
 8004af8:	6062      	str	r2, [r4, #4]
 8004afa:	bf04      	itt	eq
 8004afc:	1809      	addeq	r1, r1, r0
 8004afe:	6021      	streq	r1, [r4, #0]
 8004b00:	605c      	str	r4, [r3, #4]
 8004b02:	e7c7      	b.n	8004a94 <_free_r+0x24>
 8004b04:	bd38      	pop	{r3, r4, r5, pc}
 8004b06:	bf00      	nop
 8004b08:	20000090 	.word	0x20000090

08004b0c <_read_r>:
 8004b0c:	b538      	push	{r3, r4, r5, lr}
 8004b0e:	4c07      	ldr	r4, [pc, #28]	; (8004b2c <_read_r+0x20>)
 8004b10:	4605      	mov	r5, r0
 8004b12:	4608      	mov	r0, r1
 8004b14:	4611      	mov	r1, r2
 8004b16:	2200      	movs	r2, #0
 8004b18:	6022      	str	r2, [r4, #0]
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	f7fb ff72 	bl	8000a04 <_read>
 8004b20:	1c43      	adds	r3, r0, #1
 8004b22:	d102      	bne.n	8004b2a <_read_r+0x1e>
 8004b24:	6823      	ldr	r3, [r4, #0]
 8004b26:	b103      	cbz	r3, 8004b2a <_read_r+0x1e>
 8004b28:	602b      	str	r3, [r5, #0]
 8004b2a:	bd38      	pop	{r3, r4, r5, pc}
 8004b2c:	20000174 	.word	0x20000174

08004b30 <_fstat_r>:
 8004b30:	b538      	push	{r3, r4, r5, lr}
 8004b32:	4c07      	ldr	r4, [pc, #28]	; (8004b50 <_fstat_r+0x20>)
 8004b34:	2300      	movs	r3, #0
 8004b36:	4605      	mov	r5, r0
 8004b38:	4608      	mov	r0, r1
 8004b3a:	4611      	mov	r1, r2
 8004b3c:	6023      	str	r3, [r4, #0]
 8004b3e:	f7fb ffd3 	bl	8000ae8 <_fstat>
 8004b42:	1c43      	adds	r3, r0, #1
 8004b44:	d102      	bne.n	8004b4c <_fstat_r+0x1c>
 8004b46:	6823      	ldr	r3, [r4, #0]
 8004b48:	b103      	cbz	r3, 8004b4c <_fstat_r+0x1c>
 8004b4a:	602b      	str	r3, [r5, #0]
 8004b4c:	bd38      	pop	{r3, r4, r5, pc}
 8004b4e:	bf00      	nop
 8004b50:	20000174 	.word	0x20000174

08004b54 <_isatty_r>:
 8004b54:	b538      	push	{r3, r4, r5, lr}
 8004b56:	4c06      	ldr	r4, [pc, #24]	; (8004b70 <_isatty_r+0x1c>)
 8004b58:	2300      	movs	r3, #0
 8004b5a:	4605      	mov	r5, r0
 8004b5c:	4608      	mov	r0, r1
 8004b5e:	6023      	str	r3, [r4, #0]
 8004b60:	f7fb ffd2 	bl	8000b08 <_isatty>
 8004b64:	1c43      	adds	r3, r0, #1
 8004b66:	d102      	bne.n	8004b6e <_isatty_r+0x1a>
 8004b68:	6823      	ldr	r3, [r4, #0]
 8004b6a:	b103      	cbz	r3, 8004b6e <_isatty_r+0x1a>
 8004b6c:	602b      	str	r3, [r5, #0]
 8004b6e:	bd38      	pop	{r3, r4, r5, pc}
 8004b70:	20000174 	.word	0x20000174

08004b74 <_init>:
 8004b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b76:	bf00      	nop
 8004b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b7a:	bc08      	pop	{r3}
 8004b7c:	469e      	mov	lr, r3
 8004b7e:	4770      	bx	lr

08004b80 <_fini>:
 8004b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b82:	bf00      	nop
 8004b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b86:	bc08      	pop	{r3}
 8004b88:	469e      	mov	lr, r3
 8004b8a:	4770      	bx	lr
